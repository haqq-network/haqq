syntax = "proto3";

package haqq.ucdao.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "github.com/haqq-network/haqq/x/ucdao/types";

// Msg defines the dao Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Fund defines a method to allow an account to directly fund the dao.
  rpc Fund(MsgFund) returns (MsgFundResponse);

  // TransferOwnership defines a method to allow an account to transfer the ownership of shares to another account.
  rpc TransferOwnership(MsgTransferOwnership) returns (MsgTransferOwnershipResponse);
}

// MsgFund allows an account to directly fund the ucdao.
message MsgFund {
  option (cosmos.msg.v1.signer) = "depositor";
  option (amino.name)           = "haqq/ucdao/MsgFund";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string depositor = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgFundResponse defines the Msg/Fund response type.
message MsgFundResponse {}

// MsgTransferOwnership allows an account transfer the ownership of shares to another account.
message MsgTransferOwnership {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "haqq/ucdao/MsgTransferOwnership";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // owner is a current owner of the shares in ucdao.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // new_owner is a new owner of the shares in ucdao.
  string new_owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgTransferOwnershipResponse defines the Msg/TransferOwnership response type.
message MsgTransferOwnershipResponse {}