(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{634:function(e,t,a){"use strict";a.r(t);var s=a(1),d=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"accounts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accounts"}},[e._v("#")]),e._v(" Accounts")]),e._v(" "),a("p",{attrs:{synopsis:""}},[e._v("This document describes the in-built accounts system of Haqq.")]),e._v(" "),a("h2",{attrs:{id:"pre-requisite-readings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-requisite-readings"}},[e._v("#")]),e._v(" Pre-requisite Readings")]),e._v(" "),a("ul",[a("li",{attrs:{prereq:""}},[a("a",{attrs:{href:"https://docs.cosmos.network/master/basics/accounts.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cosmos SDK Accounts"),a("OutboundLink")],1)]),e._v(" "),a("li",{attrs:{prereq:""}},[a("a",{attrs:{href:"https://ethereum.org/en/whitepaper/#ethereum-accounts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ethereum Accounts"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"haqq-accounts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#haqq-accounts"}},[e._v("#")]),e._v(" HAQQ Accounts")]),e._v(" "),a("p",[e._v("Haqq defines its own custom "),a("code",[e._v("Account")]),e._v(" type that uses Ethereum's ECDSA secp256k1 curve for keys. This\nsatisfies the "),a("a",{attrs:{href:"https://github.com/ethereum/EIPs/issues/84",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP84"),a("OutboundLink")],1),e._v(" for full "),a("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP44"),a("OutboundLink")],1),e._v(" paths.\nThe root HD path for Haqq-based accounts is "),a("code",[e._v("m/44'/60'/0'/0")]),e._v(".")]),e._v(" "),a("p",[a("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gRXRoQWNjb3VudCBpbXBsZW1lbnRzIHRoZSBhdXRodHlwZXMuQWNjb3VudEkgaW50ZXJmYWNlIGFuZCBlbWJlZHMgYW4KLy8gYXV0aHR5cGVzLkJhc2VBY2NvdW50IHR5cGUuIEl0IGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgYXV0aCBBY2NvdW50S2VlcGVyLgp0eXBlIEV0aEFjY291bnQgc3RydWN0IHsKCS8vIGJhc2VfYWNjb3VudCBpcyBhbiBhdXRodHlwZXMuQmFzZUFjY291bnQKCSp0eXBlcy5CYXNlQWNjb3VudCBgcHJvdG9idWY6JnF1b3Q7Ynl0ZXMsMSxvcHQsbmFtZT1iYXNlX2FjY291bnQsanNvbj1iYXNlQWNjb3VudCxwcm90bzMsZW1iZWRkZWQ9YmFzZV9hY2NvdW50JnF1b3Q7IGpzb246JnF1b3Q7YmFzZV9hY2NvdW50LG9taXRlbXB0eSZxdW90OyB5YW1sOiZxdW90O2Jhc2VfYWNjb3VudCZxdW90O2AKCS8vIGNvZGVfaGFzaCBpcyB0aGUgaGFzaCBjYWxjdWxhdGVkIGZyb20gdGhlIGNvZGUgY29udGVudHM="}})],1),e._v(" "),a("h2",{attrs:{id:"addresses-and-public-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addresses-and-public-keys"}},[e._v("#")]),e._v(" Addresses and Public Keys")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/satoshilabs/slips/blob/master/slip-0173.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP-0173"),a("OutboundLink")],1),e._v(" defines a new format for segregated witness output addresses that contains a human-readable part that identifies the Bech32 usage. Haqq uses the following HRP (human readable prefix) as the base HRP:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Network")]),e._v(" "),a("th",[e._v("Mainnet")]),e._v(" "),a("th",[e._v("Testnet")]),e._v(" "),a("th",[e._v("Regtest")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Haqq")]),e._v(" "),a("td",[a("code",[e._v("haqq")])]),e._v(" "),a("td",[a("code",[e._v("haqq")])]),e._v(" "),a("td")])])]),e._v(" "),a("p",[e._v("There are 3 main types of HRP for the "),a("code",[e._v("Addresses")]),e._v("/"),a("code",[e._v("PubKeys")]),e._v(" available by default on Haqq:")]),e._v(" "),a("ul",[a("li",[e._v("Addresses and Keys for "),a("strong",[e._v("accounts")]),e._v(", which identify users (e.g. the sender of a "),a("code",[e._v("message")]),e._v("). They are derived using the "),a("strong",[a("code",[e._v("eth_secp256k1")])]),e._v(" curve.")]),e._v(" "),a("li",[e._v("Addresses and Keys for "),a("strong",[e._v("validator operators")]),e._v(", which identify the operators of validators. They are derived using the "),a("strong",[a("code",[e._v("eth_secp256k1")])]),e._v(" curve.")]),e._v(" "),a("li",[e._v("Addresses and Keys for "),a("strong",[e._v("consensus nodes")]),e._v(", which identify the validator nodes participating in consensus. They are derived using the "),a("strong",[a("code",[e._v("ed25519")])]),e._v(" curve.")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th"),e._v(" "),a("th",[e._v("Address bech32 Prefix")]),e._v(" "),a("th",[e._v("Pubkey bech32 Prefix")]),e._v(" "),a("th",[e._v("Curve")]),e._v(" "),a("th",[e._v("Address byte length")]),e._v(" "),a("th",[e._v("Pubkey byte length")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Accounts")]),e._v(" "),a("td",[a("code",[e._v("haqq")])]),e._v(" "),a("td",[a("code",[e._v("haqqpub")])]),e._v(" "),a("td",[a("code",[e._v("eth_secp256k1")])]),e._v(" "),a("td",[a("code",[e._v("20")])]),e._v(" "),a("td",[a("code",[e._v("33")]),e._v(" (compressed)")])]),e._v(" "),a("tr",[a("td",[e._v("Validator Operator")]),e._v(" "),a("td",[a("code",[e._v("haqqvaloper")])]),e._v(" "),a("td",[a("code",[e._v("haqqvaloperpub")])]),e._v(" "),a("td",[a("code",[e._v("eth_secp256k1")])]),e._v(" "),a("td",[a("code",[e._v("20")])]),e._v(" "),a("td",[a("code",[e._v("33")]),e._v(" (compressed)")])]),e._v(" "),a("tr",[a("td",[e._v("Consensus Nodes")]),e._v(" "),a("td",[a("code",[e._v("haqqvalcons")])]),e._v(" "),a("td",[a("code",[e._v("haqqvalconspub")])]),e._v(" "),a("td",[a("code",[e._v("ed25519")])]),e._v(" "),a("td",[a("code",[e._v("20")])]),e._v(" "),a("td",[a("code",[e._v("32")])])])])]),e._v(" "),a("h2",{attrs:{id:"address-formats-for-clients"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#address-formats-for-clients"}},[e._v("#")]),e._v(" Address formats for clients")]),e._v(" "),a("p",[a("code",[e._v("EthAccount")]),e._v(" can be represented in both "),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Bech32",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bech32"),a("OutboundLink")],1),e._v(" ("),a("code",[e._v("haqq1...")]),e._v(") and hex ("),a("code",[e._v("0x...")]),e._v(") formats for Ethereum's Web3 tooling compatibility.")]),e._v(" "),a("p",[e._v("The Bech32 format is the default format for Cosmos-SDK queries and transactions through CLI and REST\nclients. The hex format on the other hand, is the Ethereum "),a("code",[e._v("common.Address")]),e._v(" representation of a\nCosmos "),a("code",[e._v("sdk.AccAddress")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Address (Bech32)")]),e._v(": "),a("code",[e._v("haqq1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw")])]),e._v(" "),a("li",[a("strong",[e._v("Address ("),a("a",{attrs:{href:"https://eips.ethereum.org/EIPS/eip-55",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP55"),a("OutboundLink")],1),e._v(" Hex)")]),e._v(": "),a("code",[e._v("0x91defC7fE5603DFA8CC9B655cF5772459BF10c6f")])]),e._v(" "),a("li",[a("strong",[e._v("Compressed Public Key")]),e._v(": "),a("code",[e._v('{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"AsV5oddeB+hkByIJo/4lZiVUgXTzNfBPKC73cZ4K1YD2"}')])])]),e._v(" "),a("h3",{attrs:{id:"address-conversion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#address-conversion"}},[e._v("#")]),e._v(" Address conversion")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("Haqqd debug addr <address>")]),e._v(" can be used to convert an address between hex and bech32 formats. For example:")]),e._v(" "),a("Tabs",{attrs:{type:"border-card"}},[a("Tab",{attrs:{label:"Bech32"}},[a("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"aGFxcWQgZGVidWcgYWRkciBoYXFxMXozdDU1bTBsOWgwZXVwdXozZHA1dDVjeXB5djY3NGpqN216Mmp3CiAgQWRkcmVzczogWzIwIDg3IDc0IDEwOSAyNTUgNDUgMjIzIDE1OCA3IDEzMCAxMzkgNjcgNjkgMjExIDQgOSAyNSAxNzUgODYgODJdCiAgQWRkcmVzcyAoaGV4KTogMTQ1NzRBNkRGRjJEREY5RTA3ODI4QjQzNDVEMzA0MDkxOUFGNTY1MgogIEJlY2gzMiBBY2M6IGhhcXExejN0NTVtMGw5aDBldXB1ejNkcDV0NWN5cHl2Njc0amo3bXoyancKICBCZWNoMzIgVmFsOiBoYXFxdmFsb3BlcjF6M3Q1NW0wbDloMGV1cHV6M2RwNXQ1Y3lweXY2NzRqam40ZDZubgo="}})],1),e._v(" "),a("Tab",{attrs:{label:"Hex"}},[a("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"aGFxcWQgZGVidWcgYWRkciAxNDU3NEE2REZGMkRERjlFMDc4MjhCNDM0NUQzMDQwOTE5QUY1NjUyCiAgQWRkcmVzczogWzIwIDg3IDc0IDEwOSAyNTUgNDUgMjIzIDE1OCA3IDEzMCAxMzkgNjcgNjkgMjExIDQgOSAyNSAxNzUgODYgODJdCiAgQWRkcmVzcyAoaGV4KTogMTQ1NzRBNkRGRjJEREY5RTA3ODI4QjQzNDVEMzA0MDkxOUFGNTY1MgogIEJlY2gzMiBBY2M6IGhhcXExejN0NTVtMGw5aDBldXB1ejNkcDV0NWN5cHl2Njc0amo3bXoyancKICBCZWNoMzIgVmFsOiBoYXFxdmFsb3BlcjF6M3Q1NW0wbDloMGV1cHV6M2RwNXQ1Y3lweXY2NzRqam40ZDZubgo="}})],1)],1),e._v(" "),a("h3",{attrs:{id:"key-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-output"}},[e._v("#")]),e._v(" Key output")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[e._v("The Cosmos SDK Keyring output (i.e "),a("code",[e._v("haqqd keys")]),e._v(") only supports addresses and public keys in Bech32 format.")])]),e._v(" "),a("p",[e._v("We can use the "),a("code",[e._v("keys show")]),e._v(" command of "),a("code",[e._v("haqqd")]),e._v(" with the flag "),a("code",[e._v("--bech <type> (acc|val|cons)")]),e._v(" to\nobtain the addresses and keys as mentioned above,")]),e._v(" "),a("Tabs",{attrs:{type:"border-card"}},[a("Tab",{attrs:{label:"Account"}},[a("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"aGFxcWQga2V5cyBzaG93IG15a2V5IC0tYmVjaCBhY2MKLSBuYW1lOiBteWtleQogIHR5cGU6IGxvY2FsCiAgYWRkcmVzczogaGFxcTF6M3Q1NW0wbDloMGV1cHV6M2RwNXQ1Y3lweXY2NzRqajdtejJqdwogIHB1YmtleTogJ3smcXVvdDtAdHlwZSZxdW90OzomcXVvdDsvZXRoZXJtaW50LmNyeXB0by52MS5ldGhzZWNwMjU2azEuUHViS2V5JnF1b3Q7LCZxdW90O2tleSZxdW90OzomcXVvdDtBc1Y1b2RkZUIraGtCeUlKby80bFppVlVnWFR6TmZCUEtDNzNjWjRLMVlEMiZxdW90O30nCiAgbW5lbW9uaWM6ICZxdW90OyZxdW90Owo="}})],1),e._v(" "),a("Tab",{attrs:{label:"Validator"}},[a("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"aGFxcWQga2V5cyBzaG93IG15a2V5IC0tYmVjaCB2YWwKLSBuYW1lOiBteWtleQogIHR5cGU6IGxvY2FsCiAgYWRkcmVzczogaGFxcXZhbG9wZXIxejN0NTVtMGw5aDBldXB1ejNkcDV0NWN5cHl2Njc0ampuNGQ2bm4KICBwdWJrZXk6ICd7JnF1b3Q7QHR5cGUmcXVvdDs6JnF1b3Q7L2V0aGVybWludC5jcnlwdG8udjEuZXRoc2VjcDI1NmsxLlB1YktleSZxdW90OywmcXVvdDtrZXkmcXVvdDs6JnF1b3Q7QXNWNW9kZGVCK2hrQnlJSm8vNGxaaVZVZ1hUek5mQlBLQzczY1o0SzFZRDImcXVvdDt9JwogIG1uZW1vbmljOiAmcXVvdDsmcXVvdDsK"}})],1),e._v(" "),a("Tab",{attrs:{label:"Consensus"}},[a("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"aGFxcWQga2V5cyBzaG93IG15a2V5IC0tYmVjaCBjb25zCi0gbmFtZTogbXlrZXkKICB0eXBlOiBsb2NhbAogIGFkZHJlc3M6IGhhcXF2YWxjb25zMXJsbHFhNWQ5N242enlqaHk2Y25zY2M3enUzMHpqbjNmN3d5ajJuCiAgcHVia2V5OiAneyZxdW90O0B0eXBlJnF1b3Q7OiZxdW90Oy9ldGhlcm1pbnQuY3J5cHRvLnYxLmV0aHNlY3AyNTZrMS5QdWJLZXkmcXVvdDssJnF1b3Q7a2V5JnF1b3Q7OiZxdW90O0EvZlZMZ0lxaUx5a0ZReHVtOTZKa1NPb1RlbXJYRDB0RmFGUTFCMGNwQjJjJnF1b3Q7fScKICBtbmVtb25pYzogJnF1b3Q7JnF1b3Q7Cg=="}})],1)],1),e._v(" "),a("h2",{attrs:{id:"querying-an-account"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#querying-an-account"}},[e._v("#")]),e._v(" Querying an Account")]),e._v(" "),a("p",[e._v("You can query an account address using the CLI, gRPC or")]),e._v(" "),a("h3",{attrs:{id:"command-line-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface"}},[e._v("#")]),e._v(" Command Line Interface")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"IyBOT1RFOiB0aGUgLS1vdXRwdXQgKC1vKSBmbGFnIHdpbGwgZGVmaW5lIHRoZSBvdXRwdXQgZm9ybWF0IGluIEpTT04gb3IgWUFNTCAodGV4dCkKaGFxcWQgcSBhdXRoIGFjY291bnQgJChoYXFxZCBrZXlzIHNob3cgbXlrZXkgLWEpIC1vIHRleHQKfAogICdAdHlwZSc6IC9ldGhlcm1pbnQudHlwZXMudjEuRXRoQWNjb3VudAogIGJhc2VfYWNjb3VudDoKICAgIGFjY291bnRfbnVtYmVyOiAmcXVvdDswJnF1b3Q7CiAgICBhZGRyZXNzOiBoYXFxMXozdDU1bTBsOWgwZXVwdXozZHA1dDVjeXB5djY3NGpqN216Mmp3CiAgICBwdWJfa2V5OgogICAgICAnQHR5cGUnOiAvZXRoZXJtaW50LmNyeXB0by52MS5ldGhzZWNwMjU2azEuUHViS2V5CiAgICAgIGtleTogQXNWNW9kZGVCK2hrQnlJSm8vNGxaaVZVZ1hUek5mQlBLQzczY1o0SzFZRDIKICAgIHNlcXVlbmNlOiAmcXVvdDsxJnF1b3Q7CiAgY29kZV9oYXNoOiAweGM1ZDI0NjAxODZmNzIzM2M5MjdlN2RiMmRjYzcwM2MwZTUwMGI2NTNjYTgyMjczYjdiZmFkODA0NWQ4NWE0NzAK"}}),e._v(" "),a("h3",{attrs:{id:"cosmos-grpc-and-rest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cosmos-grpc-and-rest"}},[e._v("#")]),e._v(" Cosmos gRPC and REST")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:" bash",base64:"IyBHRVQgL2Nvc21vcy9hdXRoL3YxYmV0YTEvYWNjb3VudHMve2FkZHJlc3N9CmN1cmwgLVggR0VUICZxdW90O2h0dHA6Ly9sb2NhbGhvc3Q6MTAzMzcvY29zbW9zL2F1dGgvdjFiZXRhMS9hY2NvdW50cy9oYXFxMTRhdTMyMms5bXVua214NXdyY2h6OXEzMGp1ZjV3amd6MmNmcWt1JnF1b3Q7IC1IICZxdW90O2FjY2VwdDogYXBwbGljYXRpb24vanNvbiZxdW90Owo="}}),e._v(" "),a("h3",{attrs:{id:"json-rpc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-rpc"}},[e._v("#")]),e._v(" JSON-RPC")]),e._v(" "),a("p",[e._v("To retrieve the Ethereum hex address using Web3, use the JSON-RPC "),a("RouterLink",{attrs:{to:"/api/json-rpc/endpoints.html#eth-accounts"}},[a("code",[e._v("eth_accounts")])]),e._v(" or "),a("RouterLink",{attrs:{to:"/api/json-rpc/endpoints.html#personal-listAccounts"}},[a("code",[e._v("personal_listAccounts")])]),e._v(" endpoints:")],1),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"IyBxdWVyeSBhZ2FpbnN0IGEgbG9jYWwgbm9kZQpjdXJsIC1YIFBPU1QgLS1kYXRhICd7JnF1b3Q7anNvbnJwYyZxdW90OzomcXVvdDsyLjAmcXVvdDssJnF1b3Q7bWV0aG9kJnF1b3Q7OiZxdW90O2V0aF9hY2NvdW50cyZxdW90OywmcXVvdDtwYXJhbXMmcXVvdDs6W10sJnF1b3Q7aWQmcXVvdDs6MX0nIC1IICZxdW90O0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiZxdW90OyBodHRwOi8vbG9jYWxob3N0Ojg1NDUKCmN1cmwgLVggUE9TVCAtLWRhdGEgJ3smcXVvdDtqc29ucnBjJnF1b3Q7OiZxdW90OzIuMCZxdW90OywmcXVvdDttZXRob2QmcXVvdDs6JnF1b3Q7cGVyc29uYWxfbGlzdEFjY291bnRzJnF1b3Q7LCZxdW90O3BhcmFtcyZxdW90OzpbXSwmcXVvdDtpZCZxdW90OzoxfScgLUggJnF1b3Q7Q29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJnF1b3Q7IGh0dHA6Ly9sb2NhbGhvc3Q6ODU0NQo="}})],1)}),[],!1,null,null,null);t.default=d.exports}}]);