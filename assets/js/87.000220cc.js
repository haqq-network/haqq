(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{639:function(l,c,Z){"use strict";Z.r(c);var g=Z(1),d=Object(g.a)({},(function(){var l=this,c=l.$createElement,Z=l._self._c||c;return Z("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[Z("h1",{attrs:{id:"gas-and-fees"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#gas-and-fees"}},[l._v("#")]),l._v(" Gas and Fees")]),l._v(" "),Z("p",{attrs:{synopsis:""}},[l._v("Learn about the differences between "),Z("code",[l._v("Gas")]),l._v(" and "),Z("code",[l._v("Fees")]),l._v(" in Ethereum and Cosmos.")]),l._v(" "),Z("h2",{attrs:{id:"pre-requisite-readings"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#pre-requisite-readings"}},[l._v("#")]),l._v(" Pre-requisite Readings")]),l._v(" "),Z("ul",[Z("li",{attrs:{prereq:""}},[Z("a",{attrs:{href:"https://docs.cosmos.network/master/basics/gas-fees.html",target:"_blank",rel:"noopener noreferrer"}},[l._v("Cosmos SDK Gas"),Z("OutboundLink")],1)]),l._v(" "),Z("li",{attrs:{prereq:""}},[Z("a",{attrs:{href:"https://ethereum.org/en/developers/docs/gas/",target:"_blank",rel:"noopener noreferrer"}},[l._v("Ethereum Gas"),Z("OutboundLink")],1)])]),l._v(" "),Z("p",[l._v("The concept of Gas represents the amount of computational effort required to execute specific operations on the state machine.")]),l._v(" "),Z("p",[l._v("Gas was created on Ethereum to disallow the EVM (Ethereum Virtual Machine) from running infinite\nloops by allocating a small amount of monetary value into the system. A unit of gas, usually in the\nform of a fraction of the native coin, is consumed for every operation on the EVM and requires a\nuser to pay for these operations. These operations consist in state transitions such as sending a\ntransaction or calling a contract.")]),l._v(" "),Z("p",[l._v("Exactly like Ethereum, Cosmos utilizes the concept of gas and this is how Cosmos tracks the resource\nusage of operations during execution. Operations on Cosmos are represented as read or writes done to the chain's store.")]),l._v(" "),Z("p",[l._v("In Cosmos, a fee is calculated and charged to the user during a message execution. This fee is\ncalculated from the sum of all gas consumed in a message execution:")]),l._v(" "),Z("p",[Z("span",{staticClass:"katex-display"},[Z("span",{staticClass:"katex"},[Z("span",{staticClass:"katex-mathml"},[Z("math",[Z("semantics",[Z("mrow",[Z("mi",[l._v("f")]),Z("mi",[l._v("e")]),Z("mi",[l._v("e")]),Z("mo",[l._v("=")]),Z("mi",[l._v("g")]),Z("mi",[l._v("a")]),Z("mi",[l._v("s")]),Z("mtext"),Z("mo",[l._v("∗")]),Z("mtext"),Z("mi",[l._v("g")]),Z("mi",[l._v("a")]),Z("mi",[l._v("s")]),Z("mi",[l._v("P")]),Z("mi",[l._v("r")]),Z("mi",[l._v("i")]),Z("mi",[l._v("c")]),Z("mi",[l._v("e")])],1),Z("annotation",{attrs:{encoding:"application/x-tex"}},[l._v("fee = gas ~ * ~ gasPrice\n")])],1)],1)],1),Z("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[Z("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),Z("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),Z("span",{staticClass:"base displaystyle textstyle uncramped"},[Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[l._v("f")]),Z("span",{staticClass:"mord mathit"},[l._v("e")]),Z("span",{staticClass:"mord mathit"},[l._v("e")]),Z("span",{staticClass:"mrel"},[l._v("=")]),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[l._v("g")]),Z("span",{staticClass:"mord mathit"},[l._v("a")]),Z("span",{staticClass:"mord mathit"},[l._v("s")]),Z("span",{staticClass:"mord mspace"}),Z("span",{staticClass:"mbin"},[l._v("∗")]),Z("span",{staticClass:"mord mspace"}),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[l._v("g")]),Z("span",{staticClass:"mord mathit"},[l._v("a")]),Z("span",{staticClass:"mord mathit"},[l._v("s")]),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[l._v("P")]),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[l._v("r")]),Z("span",{staticClass:"mord mathit"},[l._v("i")]),Z("span",{staticClass:"mord mathit"},[l._v("c")]),Z("span",{staticClass:"mord mathit"},[l._v("e")])])])])])]),l._v(" "),Z("p",[l._v("In both networks, gas is used to make sure that operations do not require an excess amount of\ncomputational power to complete and as a way to deter bad-acting users from spamming the network.")]),l._v(" "),Z("h2",{attrs:{id:"cosmos-sdk-gas"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#cosmos-sdk-gas"}},[l._v("#")]),l._v(" Cosmos SDK "),Z("code",[l._v("Gas")])]),l._v(" "),Z("p",[l._v("In the Cosmos SDK, gas is tracked in the main "),Z("code",[l._v("GasMeter")]),l._v(" and the "),Z("code",[l._v("BlockGasMeter")]),l._v(":")]),l._v(" "),Z("ul",[Z("li",[Z("code",[l._v("GasMeter")]),l._v(": keeps track of the gas consumed during executions that lead to state transitions. It is reset on every transaction execution.")]),l._v(" "),Z("li",[Z("code",[l._v("BlockGasMeter")]),l._v(": keeps track of the gas consumed in a block and enforces that the gas does not go over a predefined limit. This limit is defined in the Tendermint consensus parameters and can be changed via governance parameter change proposals.")])]),l._v(" "),Z("p",[l._v("More information regarding gas in Cosmos SDK can be found "),Z("a",{attrs:{href:"https://docs.cosmos.network/master/basics/gas-fees.html",target:"_blank",rel:"noopener noreferrer"}},[l._v("here"),Z("OutboundLink")],1),l._v(".")]),l._v(" "),Z("h2",{attrs:{id:"matching-evm-gas-consumption"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#matching-evm-gas-consumption"}},[l._v("#")]),l._v(" Matching EVM Gas consumption")]),l._v(" "),Z("p",[l._v("Haqq is an EVM-compatible chain that supports Ethereum Web3 tooling. For this reason, gas\nconsumption must be equitable with other EVMs, most importantly Ethereum.")]),l._v(" "),Z("p",[l._v("The main difference between EVM and Cosmos state transitions, is that the EVM uses a "),Z("a",{attrs:{href:"https://github.com/ethereum/go-ethereum/blob/master/params/protocol_params.go",target:"_blank",rel:"noopener noreferrer"}},[l._v("gas table"),Z("OutboundLink")],1),l._v(" for each OPCODE, whereas Cosmos uses a "),Z("code",[l._v("GasConfig")]),l._v(" that charges gas for each CRUD operation by setting a flat and per-byte cost for accessing the database.")]),l._v(" "),Z("p",[Z("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gR2FzQ29uZmlnIGRlZmluZXMgZ2FzIGNvc3QgZm9yIGVhY2ggb3BlcmF0aW9uIG9uIEtWU3RvcmVzCnR5cGUgR2FzQ29uZmlnIHN0cnVjdCB7CglIYXNDb3N0ICAgICAgICAgIEdhcwoJRGVsZXRlQ29zdCAgICAgICBHYXMKCVJlYWRDb3N0RmxhdCAgICAgR2FzCglSZWFkQ29zdFBlckJ5dGUgIEdhcwoJV3JpdGVDb3N0RmxhdCAgICBHYXMKCVdyaXRlQ29zdFBlckJ5dGUgR2FzCglJdGVyTmV4dENvc3RGbGF0IEdhcwp9"}})],1),l._v(" "),Z("p",[l._v("In order to match the gas consumed by the EVM, the gas consumption logic from the SDK is ignored, and instead the gas consumed is calculated by subtracting the state transition leftover gas plus refund from the gas limit defined on the message.")]),l._v(" "),Z("p",[l._v("To ignore the SDK gas consumption, we reset the transaction "),Z("code",[l._v("GasMeter")]),l._v(" count to 0 and manually set it to the "),Z("code",[l._v("gasUsed")]),l._v(" value computed by the EVM module at the end of the execution.")]),l._v(" "),Z("p",[Z("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"cGFja2FnZSBrZWVwZXIKCmltcG9ydCAoCgkmcXVvdDttYXRoL2JpZyZxdW90OwoKCWVycm9yc21vZCAmcXVvdDtjb3Ntb3NzZGsuaW8vZXJyb3JzJnF1b3Q7Cgl0bXR5cGVzICZxdW90O2dpdGh1Yi5jb20vY29tZXRiZnQvY29tZXRiZnQvdHlwZXMmcXVvdDsKCXNkayAmcXVvdDtnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVzJnF1b3Q7CgkmcXVvdDtnaXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL2NvbW1vbiZxdW90OwoJJnF1b3Q7Z2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9jb3JlJnF1b3Q7CglldGh0eXBlcyAmcXVvdDtnaXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL2NvcmUvdHlwZXMmcXVvdDsKCSZxdW90O2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vY29yZS92bSZxdW90OwoJJnF1b3Q7Z2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9jcnlwdG8mcXVvdDsKCSZxdW90O2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vcGFyYW1zJnF1b3Q7CgoJaGFxcXR5cGVzICZxdW90O2dpdGh1Yi5jb20vaGFxcS1uZXR3b3JrL2hhcXEvdHlwZXMmcXVvdDsKCSZxdW90O2dpdGh1Yi5jb20vaGFxcS1uZXR3b3JrL2hhcXEveC9ldm0vc3RhdGVkYiZxdW90OwoJJnF1b3Q7Z2l0aHViLmNvbS9oYXFxLW5ldHdvcmsvaGFxcS94L2V2bS90eXBlcyZxdW90OwopCgovLyBOZXdFVk0gZ2VuZXJhdGVzIGEgZ28tZXRoZXJldW0gVk0gZnJvbSB0aGUgcHJvdmlkZWQgTWVzc2FnZSBmaWVsZHMgYW5kIHRoZSBjaGFpbiBwYXJhbWV0ZXJzCi8vIChDaGFpbkNvbmZpZyBhbmQgbW9kdWxlIFBhcmFtcykuIEl0IGFkZGl0aW9uYWxseSBzZXRzIHRoZSB2YWxpZGF0b3Igb3BlcmF0b3IgYWRkcmVzcyBhcyB0aGUKLy8gY29pbmJhc2UgYWRkcmVzcyB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIENPSU5CQVNFIG9wY29kZSwgZXZlbiB0aG91Z2ggdGhlcmUgaXMgbm8KLy8gYmVuZWZpY2lhcnkgb2YgdGhlIGNvaW5iYXNlIHRyYW5zYWN0aW9uIChzaW5jZSB3ZSdyZSBub3QgbWluaW5nKS4KLy8KLy8gTk9URTogdGhlIFJBTkRPTSBvcGNvZGUgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgc2luY2UgaXQgcmVxdWlyZXMKLy8gUkFOREFPIGltcGxlbWVudGF0aW9uLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2V2bW9zL2V0aGVybWludC9wdWxsLzE1MjAjcHVsbHJlcXVlc3RyZXZpZXctMTIwMDUwNDY5NwovLyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KCmZ1bmMgKGsgKktlZXBlcikgTmV3RVZNKAoJY3R4IHNkay5Db250ZXh0LAoJbXNnIGNvcmUuTWVzc2FnZSwKCWNmZyAqc3RhdGVkYi5FVk1Db25maWcsCgl0cmFjZXIgdm0uRVZNTG9nZ2VyLAoJc3RhdGVEQiB2bS5TdGF0ZURCLAopICp2bS5FVk0gewoJYmxvY2tDdHggOj0gdm0uQmxvY2tDb250ZXh0ewoJCUNhblRyYW5zZmVyOiBjb3JlLkNhblRyYW5zZmVyLAoJCVRyYW5zZmVyOiAgICBjb3JlLlRyYW5zZmVyLAoJCUdldEhhc2g6ICAgICBrLkdldEhhc2hGbihjdHgpLAoJCUNvaW5iYXNlOiAgICBjZmcuQ29pbkJhc2UsCgkJR2FzTGltaXQ6ICAgIGhhcXF0eXBlcy5CbG9ja0dhc0xpbWl0KGN0eCksCgkJQmxvY2tOdW1iZXI6IGJpZy5OZXdJbnQoY3R4LkJsb2NrSGVpZ2h0KCkpLAoJCVRpbWU6ICAgICAgICBiaWcuTmV3SW50KGN0eC5CbG9ja0hlYWRlcigpLlRpbWUuVW5peCgpKSwKCQlEaWZmaWN1bHR5OiAgYmlnLk5ld0ludCgwKSwgLy8gdW51c2VkLiBPbmx5IHJlcXVpcmVkIGluIFBvVyBjb250ZXh0CgkJQmFzZUZlZTogICAgIGNmZy5CYXNlRmVlLAoJCVJhbmRvbTogICAgICBuaWwsIC8vIG5vdCBzdXBwb3J0ZWQKCX0KCgl0eEN0eCA6PSBjb3JlLk5ld0VWTVR4Q29udGV4dChtc2cpCglpZiB0cmFjZXIgPT0gbmlsIHsKCQl0cmFjZXIgPSBrLlRyYWNlcihjdHgsIG1zZywgY2ZnLkNoYWluQ29uZmlnKQoJfQoJdm1Db25maWcgOj0gay5WTUNvbmZpZyhjdHgsIG1zZywgY2ZnLCB0cmFjZXIpCglyZXR1cm4gdm0uTmV3RVZNKGJsb2NrQ3R4LCB0eEN0eCwgc3RhdGVEQiwgY2ZnLkNoYWluQ29uZmlnLCB2bUNvbmZpZykKfQoKLy8gR2V0SGFzaEZuIGltcGxlbWVudHMgdm0uR2V0SGFzaEZ1bmMgZm9yIEV0aGVybWludC4gSXQgaGFuZGxlcyAzIGNhc2VzOgovLyAgMS4gVGhlIHJlcXVlc3RlZCBoZWlnaHQgbWF0Y2hlcyB0aGUgY3VycmVudCBoZWlnaHQgZnJvbSBjb250ZXh0IChhbmQgdGh1cyBzYW1lIGVwb2NoIG51bWJlcikKLy8gIDIuIFRoZSByZXF1ZXN0ZWQgaGVpZ2h0IGlzIGZyb20gYW4gcHJldmlvdXMgaGVpZ2h0IGZyb20gdGhlIHNhbWUgY2hhaW4gZXBvY2gKLy8gIDMuIFRoZSByZXF1ZXN0ZWQgaGVpZ2h0IGlzIGZyb20gYSBoZWlnaHQgZ3JlYXRlciB0aGFuIHRoZSBsYXRlc3Qgb25lCmZ1bmMgKGsgS2VlcGVyKSBHZXRIYXNoRm4oY3R4IHNkay5Db250ZXh0KSB2bS5HZXRIYXNoRnVuYyB7CglyZXR1cm4gZnVuYyhoZWlnaHQgdWludDY0KSBjb21tb24uSGFzaCB7CgkJaCwgZXJyIDo9IGhhcXF0eXBlcy5TYWZlSW50NjQoaGVpZ2h0KQoJCWlmIGVyciAhPSBuaWwgewoJCQlrLkxvZ2dlcihjdHgpLkVycm9yKCZxdW90O2ZhaWxlZCB0byBjYXN0IGhlaWdodCB0byBpbnQ2NCZxdW90OywgJnF1b3Q7ZXJyb3ImcXVvdDssIGVycikKCQkJcmV0dXJuIGNvbW1vbi5IYXNoe30KCQl9CgoJCXN3aXRjaCB7CgkJY2FzZSBjdHguQmxvY2tIZWlnaHQoKSA9PSBoOgoJCQkvLyBDYXNlIDE6IFRoZSByZXF1ZXN0ZWQgaGVpZ2h0IG1hdGNoZXMgdGhlIG9uZSBmcm9tIHRoZSBjb250ZXh0IHNvIHdlIGNhbiByZXRyaWV2ZSB0aGUgaGVhZGVyCgkJCS8vIGhhc2ggZGlyZWN0bHkgZnJvbSB0aGUgY29udGV4dC4KCQkJLy8gTm90ZTogVGhlIGhlYWRlckhhc2ggaXMgb25seSBzZXQgYXQgYmVnaW4gYmxvY2ssIGl0IHdpbGwgYmUgbmlsIGluIGNhc2Ugb2YgYSBxdWVyeSBjb250ZXh0CgkJCWhlYWRlckhhc2ggOj0gY3R4LkhlYWRlckhhc2goKQoJCQlpZiBsZW4oaGVhZGVySGFzaCkgIT0gMCB7CgkJCQlyZXR1cm4gY29tbW9uLkJ5dGVzVG9IYXNoKGhlYWRlckhhc2gpCgkJCX0KCgkJCS8vIG9ubHkgcmVjb21wdXRlIHRoZSBoYXNoIGlmIG5vdCBzZXQgKGVnOiBjaGVja1R4U3RhdGUpCgkJCWNvbnRleHRCbG9ja0hlYWRlciA6PSBjdHguQmxvY2tIZWFkZXIoKQoJCQloZWFkZXIsIGVyciA6PSB0bXR5cGVzLkhlYWRlckZyb21Qcm90bygmYW1wO2NvbnRleHRCbG9ja0hlYWRlcikKCQkJaWYgZXJyICE9IG5pbCB7CgkJCQlrLkxvZ2dlcihjdHgpLkVycm9yKCZxdW90O2ZhaWxlZCB0byBjYXN0IHRlbmRlcm1pbnQgaGVhZGVyIGZyb20gcHJvdG8mcXVvdDssICZxdW90O2Vycm9yJnF1b3Q7LCBlcnIpCgkJCQlyZXR1cm4gY29tbW9uLkhhc2h7fQoJCQl9CgoJCQloZWFkZXJIYXNoID0gaGVhZGVyLkhhc2goKQoJCQlyZXR1cm4gY29tbW9uLkJ5dGVzVG9IYXNoKGhlYWRlckhhc2gpCgoJCWNhc2UgY3R4LkJsb2NrSGVpZ2h0KCkgJmd0OyBoOgoJCQkvLyBDYXNlIDI6IGlmIHRoZSBjaGFpbiBpcyBub3QgdGhlIGN1cnJlbnQgaGVpZ2h0IHdlIG5lZWQgdG8gcmV0cmlldmUgdGhlIGhhc2ggZnJvbSB0aGUgc3RvcmUgZm9yIHRoZQoJCQkvLyBjdXJyZW50IGNoYWluIGVwb2NoLiBUaGlzIG9ubHkgYXBwbGllcyBpZiB0aGUgY3VycmVudCBoZWlnaHQgaXMgZ3JlYXRlciB0aGFuIHRoZSByZXF1ZXN0ZWQgaGVpZ2h0LgoJCQloaXN0SW5mbywgZm91bmQgOj0gay5zdGFraW5nS2VlcGVyLkdldEhpc3RvcmljYWxJbmZvKGN0eCwgaCkKCQkJaWYgIWZvdW5kIHsKCQkJCWsuTG9nZ2VyKGN0eCkuRGVidWcoJnF1b3Q7aGlzdG9yaWNhbCBpbmZvIG5vdCBmb3VuZCZxdW90OywgJnF1b3Q7aGVpZ2h0JnF1b3Q7LCBoKQoJCQkJcmV0dXJuIGNvbW1vbi5IYXNoe30KCQkJfQoKCQkJaGVhZGVyLCBlcnIgOj0gdG10eXBlcy5IZWFkZXJGcm9tUHJvdG8oJmFtcDtoaXN0SW5mby5IZWFkZXIpCgkJCWlmIGVyciAhPSBuaWwgewoJCQkJay5Mb2dnZXIoY3R4KS5FcnJvcigmcXVvdDtmYWlsZWQgdG8gY2FzdCB0ZW5kZXJtaW50IGhlYWRlciBmcm9tIHByb3RvJnF1b3Q7LCAmcXVvdDtlcnJvciZxdW90OywgZXJyKQoJCQkJcmV0dXJuIGNvbW1vbi5IYXNoe30KCQkJfQoKCQkJcmV0dXJuIGNvbW1vbi5CeXRlc1RvSGFzaChoZWFkZXIuSGFzaCgpKQoJCWRlZmF1bHQ6CgkJCS8vIENhc2UgMzogaGVpZ2h0cyBncmVhdGVyIHRoYW4gdGhlIGN1cnJlbnQgb25lIHJldHVybnMgYW4gZW1wdHkgaGFzaC4KCQkJcmV0dXJuIGNvbW1vbi5IYXNoe30KCQl9Cgl9Cn0KCi8vIEFwcGx5VHJhbnNhY3Rpb24gcnVucyBhbmQgYXR0ZW1wdHMgdG8gcGVyZm9ybSBhIHN0YXRlIHRyYW5zaXRpb24gd2l0aCB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24gKGkuZSBNZXNzYWdlKSwgdGhhdCB3aWxsCi8vIG9ubHkgYmUgcGVyc2lzdGVkIChjb21taXR0ZWQpIHRvIHRoZSB1bmRlcmx5aW5nIEtWU3RvcmUgaWYgdGhlIHRyYW5zYWN0aW9uIGRvZXMgbm90IGZhaWwuCi8vCi8vICMgR2FzIHRyYWNraW5nCi8vCi8vIEV0aGVyZXVtIGNvbnN1bWVzIGdhcyBhY2NvcmRpbmcgdG8gdGhlIEVWTSBvcGNvZGVzIGluc3RlYWQgb2YgZ2VuZXJhbCByZWFkcyBhbmQgd3JpdGVzIHRvIHN0b3JlLiBCZWNhdXNlIG9mIHRoaXMsIHRoZQovLyBzdGF0ZSB0cmFuc2l0aW9uIG5lZWRzIHRvIGlnbm9yZSB0aGUgU0RLIGdhcyBjb25zdW1wdGlvbiBtZWNoYW5pc20gZGVmaW5lZCBieSB0aGUgR2FzS1ZTdG9yZSBhbmQgaW5zdGVhZCBjb25zdW1lIHRoZQovLyBhbW91bnQgb2YgZ2FzIHVzZWQgYnkgdGhlIFZNIGV4ZWN1dGlvbi4gVGhlIGFtb3VudCBvZiBnYXMgdXNlZCBpcyB0cmFja2VkIGJ5IHRoZSBFVk0gYW5kIHJldHVybmVkIGluIHRoZSBleGVjdXRpb24KLy8gcmVzdWx0LgovLwovLyBQcmlvciB0byB0aGUgZXhlY3V0aW9uLCB0aGUgc3RhcnRpbmcgdHggZ2FzIG1ldGVyIGlzIHNhdmVkIGFuZCByZXBsYWNlZCB3aXRoIGFuIGluZmluaXRlIGdhcyBtZXRlciBpbiBhIG5ldyBjb250ZXh0Ci8vIGluIG9yZGVyIHRvIGlnbm9yZSB0aGUgU0RLIGdhcyBjb25zdW1wdGlvbiBjb25maWcgdmFsdWVzIChyZWFkLCB3cml0ZSwgaGFzLCBkZWxldGUpLgovLyBBZnRlciB0aGUgZXhlY3V0aW9uLCB0aGUgZ2FzIHVzZWQgZnJvbSB0aGUgbWVzc2FnZSBleGVjdXRpb24gd2lsbCBiZSBhZGRlZCB0byB0aGUgc3RhcnRpbmcgZ2FzIGNvbnN1bWVkLCB0YWtpbmcgaW50bwovLyBjb25zaWRlcmF0aW9uIHRoZSBhbW91bnQgb2YgZ2FzIHJldHVybmVkLiBGaW5hbGx5LCB0aGUgY29udGV4dCBpcyB1cGRhdGVkIHdpdGggdGhlIEVWTSBnYXMgY29uc3VtZWQgdmFsdWUgcHJpb3IgdG8KLy8gcmV0dXJuaW5nLgovLwovLyBGb3IgcmVsZXZhbnQgZGlzY3Vzc2lvbiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay9kaXNjdXNzaW9ucy85MDcyCmZ1bmMgKGsgKktlZXBlcikgQXBwbHlUcmFuc2FjdGlvbihjdHggc2RrLkNvbnRleHQsIHR4ICpldGh0eXBlcy5UcmFuc2FjdGlvbikgKCp0eXBlcy5Nc2dFdGhlcmV1bVR4UmVzcG9uc2UsIGVycm9yKSB7Cgl2YXIgKAoJCWJsb29tICAgICAgICAqYmlnLkludAoJCWJsb29tUmVjZWlwdCBldGh0eXBlcy5CbG9vbQoJKQoKCWNmZywgZXJyIDo9IGsuRVZNQ29uZmlnKGN0eCwgc2RrLkNvbnNBZGRyZXNzKGN0eC5CbG9ja0hlYWRlcigpLlByb3Bvc2VyQWRkcmVzcyksIGsuZWlwMTU1Q2hhaW5JRCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycm9yc21vZC5XcmFwKGVyciwgJnF1b3Q7ZmFpbGVkIHRvIGxvYWQgZXZtIGNvbmZpZyZxdW90OykKCX0KCXR4Q29uZmlnIDo9IGsuVHhDb25maWcoY3R4LCB0eC5IYXNoKCkpCgoJLy8gZ2V0IHRoZSBzaWduZXIgYWNjb3JkaW5nIHRvIHRoZSBjaGFpbiBydWxlcyBmcm9tIHRoZSBjb25maWcgYW5kIGJsb2NrIGhlaWdodAoJc2lnbmVyIDo9IGV0aHR5cGVzLk1ha2VTaWduZXIoY2ZnLkNoYWluQ29uZmlnLCBiaWcuTmV3SW50KGN0eC5CbG9ja0hlaWdodCgpKSkKCW1zZywgZXJyIDo9IHR4LkFzTWVzc2FnZShzaWduZXIsIGNmZy5CYXNlRmVlKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyb3JzbW9kLldyYXAoZXJyLCAmcXVvdDtmYWlsZWQgdG8gcmV0dXJuIGV0aGVyZXVtIHRyYW5zYWN0aW9uIGFzIGNvcmUgbWVzc2FnZSZxdW90OykKCX0KCgkvLyBzbmFwc2hvdCB0byBjb250YWluIHRoZSB0eCBwcm9jZXNzaW5nIGFuZCBwb3N0IHByb2Nlc3NpbmcgaW4gc2FtZSBzY29wZQoJdmFyIGNvbW1pdCBmdW5jKCkKCXRtcEN0eCA6PSBjdHgKCWlmIGsuaG9va3MgIT0gbmlsIHsKCQkvLyBDcmVhdGUgYSBjYWNoZSBjb250ZXh0IHRvIHJldmVydCBzdGF0ZSB3aGVuIHR4IGhvb2tzIGZhaWxzLAoJCS8vIHRoZSBjYWNoZSBjb250ZXh0IGlzIG9ubHkgY29tbWl0dGVkIHdoZW4gYm90aCB0eCBhbmQgaG9va3MgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5LgoJCS8vIERpZG4ndCB1c2UgYFNuYXBzaG90YCBiZWNhdXNlIHRoZSBjb250ZXh0IHN0YWNrIGhhcyBleHBvbmVudGlhbCBjb21wbGV4aXR5IG9uIGNlcnRhaW4gb3BlcmF0aW9ucywKCQkvLyB0aHVzIHJlc3RyaWN0ZWQgdG8gYmUgdXNlZCBvbmx5IGluc2lkZSBgQXBwbHlNZXNzYWdlYC4KCQl0bXBDdHgsIGNvbW1pdCA9IGN0eC5DYWNoZUNvbnRleHQoKQoJfQoKCS8vIHBhc3MgdHJ1ZSB0byBjb21taXQgdGhlIFN0YXRlREIKCXJlcywgZXJyIDo9IGsuQXBwbHlNZXNzYWdlV2l0aENvbmZpZyh0bXBDdHgsIG1zZywgbmlsLCB0cnVlLCBjZmcsIHR4Q29uZmlnKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyb3JzbW9kLldyYXAoZXJyLCAmcXVvdDtmYWlsZWQgdG8gYXBwbHkgZXRoZXJldW0gY29yZSBtZXNzYWdlJnF1b3Q7KQoJfQoKCWxvZ3MgOj0gdHlwZXMuTG9nc1RvRXRoZXJldW0ocmVzLkxvZ3MpCgoJLy8gQ29tcHV0ZSBibG9jayBibG9vbSBmaWx0ZXIKCWlmIGxlbihsb2dzKSAmZ3Q7IDAgewoJCWJsb29tID0gay5HZXRCbG9ja0Jsb29tVHJhbnNpZW50KGN0eCkKCQlibG9vbS5PcihibG9vbSwgYmlnLk5ld0ludCgwKS5TZXRCeXRlcyhldGh0eXBlcy5Mb2dzQmxvb20obG9ncykpKQoJCWJsb29tUmVjZWlwdCA9IGV0aHR5cGVzLkJ5dGVzVG9CbG9vbShibG9vbS5CeXRlcygpKQoJfQoKCWN1bXVsYXRpdmVHYXNVc2VkIDo9IHJlcy5HYXNVc2VkCglpZiBjdHguQmxvY2tHYXNNZXRlcigpICE9IG5pbCB7CgkJbGltaXQgOj0gY3R4LkJsb2NrR2FzTWV0ZXIoKS5MaW1pdCgpCgkJY3VtdWxhdGl2ZUdhc1VzZWQgKz0gY3R4LkJsb2NrR2FzTWV0ZXIoKS5HYXNDb25zdW1lZCgpCgkJaWYgY3VtdWxhdGl2ZUdhc1VzZWQgJmd0OyBsaW1pdCB7CgkJCWN1bXVsYXRpdmVHYXNVc2VkID0gbGltaXQKCQl9Cgl9CgoJdmFyIGNvbnRyYWN0QWRkciBjb21tb24uQWRkcmVzcwoJaWYgbXNnLlRvKCkgPT0gbmlsIHsKCQljb250cmFjdEFkZHIgPSBjcnlwdG8uQ3JlYXRlQWRkcmVzcyhtc2cuRnJvbSgpLCBtc2cuTm9uY2UoKSkKCX0KCglyZWNlaXB0IDo9ICZhbXA7ZXRodHlwZXMuUmVjZWlwdHsKCQlUeXBlOiAgICAgICAgICAgICAgdHguVHlwZSgpLAoJCVBvc3RTdGF0ZTogICAgICAgICBuaWwsIC8vIFRPRE86IGludGVybWVkaWF0ZSBzdGF0ZSByb290CgkJQ3VtdWxhdGl2ZUdhc1VzZWQ6IGN1bXVsYXRpdmVHYXNVc2VkLAoJCUJsb29tOiAgICAgICAgICAgICBibG9vbVJlY2VpcHQsCgkJTG9nczogICAgICAgICAgICAgIGxvZ3MsCgkJVHhIYXNoOiAgICAgICAgICAgIHR4Q29uZmlnLlR4SGFzaCwKCQlDb250cmFjdEFkZHJlc3M6ICAgY29udHJhY3RBZGRyLAoJCUdhc1VzZWQ6ICAgICAgICAgICByZXMuR2FzVXNlZCwKCQlCbG9ja0hhc2g6ICAgICAgICAgdHhDb25maWcuQmxvY2tIYXNoLAoJCUJsb2NrTnVtYmVyOiAgICAgICBiaWcuTmV3SW50KGN0eC5CbG9ja0hlaWdodCgpKSwKCQlUcmFuc2FjdGlvbkluZGV4OiAgdHhDb25maWcuVHhJbmRleCwKCX0KCglpZiAhcmVzLkZhaWxlZCgpIHsKCQlyZWNlaXB0LlN0YXR1cyA9IGV0aHR5cGVzLlJlY2VpcHRTdGF0dXNTdWNjZXNzZnVsCgkJLy8gT25seSBjYWxsIGhvb2tzIGlmIHR4IGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseS4KCQlpZiBlcnIgPSBrLlBvc3RUeFByb2Nlc3NpbmcodG1wQ3R4LCBtc2csIHJlY2VpcHQpOyBlcnIgIT0gbmlsIHsKCQkJLy8gSWYgaG9va3MgcmV0dXJuIGVycm9yLCByZXZlcnQgdGhlIHdob2xlIHR4LgoJCQlyZXMuVm1FcnJvciA9IHR5cGVzLkVyclBvc3RUeFByb2Nlc3NpbmcuRXJyb3IoKQoJCQlrLkxvZ2dlcihjdHgpLkVycm9yKCZxdW90O3R4IHBvc3QgcHJvY2Vzc2luZyBmYWlsZWQmcXVvdDssICZxdW90O2Vycm9yJnF1b3Q7LCBlcnIpCgoJCQkvLyBJZiB0aGUgdHggZmFpbGVkIGluIHBvc3QgcHJvY2Vzc2luZyBob29rcywgd2Ugc2hvdWxkIGNsZWFyIHRoZSBsb2dzCgkJCXJlcy5Mb2dzID0gbmlsCgkJfSBlbHNlIGlmIGNvbW1pdCAhPSBuaWwgewoJCQkvLyBQb3N0VHhQcm9jZXNzaW5nIGlzIHN1Y2Nlc3NmdWwsIGNvbW1pdCB0aGUgdG1wQ3R4CgkJCWNvbW1pdCgpCgkJCS8vIFNpbmNlIHRoZSBwb3N0LXByb2Nlc3NpbmcgY2FuIGFsdGVyIHRoZSBsb2csIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSByZXN1bHQKCQkJcmVzLkxvZ3MgPSB0eXBlcy5OZXdMb2dzRnJvbUV0aChyZWNlaXB0LkxvZ3MpCgkJCWN0eC5FdmVudE1hbmFnZXIoKS5FbWl0RXZlbnRzKHRtcEN0eC5FdmVudE1hbmFnZXIoKS5FdmVudHMoKSkKCQl9Cgl9CgoJLy8gcmVmdW5kIGdhcyBpbiBvcmRlciB0byBtYXRjaCB0aGUgRXRoZXJldW0gZ2FzIGNvbnN1bXB0aW9uIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgU0RLIG9uZS4KCWlmIGVyciA9IGsuUmVmdW5kR2FzKGN0eCwgbXNnLCBtc2cuR2FzKCktcmVzLkdhc1VzZWQsIGNmZy5QYXJhbXMuRXZtRGVub20pOyBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnJvcnNtb2QuV3JhcGYoZXJyLCAmcXVvdDtmYWlsZWQgdG8gcmVmdW5kIGdhcyBsZWZ0b3ZlciBnYXMgdG8gc2VuZGVyICVzJnF1b3Q7LCBtc2cuRnJvbSgpKQoJfQoKCWlmIGxlbihyZWNlaXB0LkxvZ3MpICZndDsgMCB7CgkJLy8gVXBkYXRlIHRyYW5zaWVudCBibG9jayBibG9vbSBmaWx0ZXIKCQlrLlNldEJsb2NrQmxvb21UcmFuc2llbnQoY3R4LCByZWNlaXB0LkJsb29tLkJpZygpKQoJCWsuU2V0TG9nU2l6ZVRyYW5zaWVudChjdHgsIHVpbnQ2NCh0eENvbmZpZy5Mb2dJbmRleCkrdWludDY0KGxlbihyZWNlaXB0LkxvZ3MpKSkKCX0KCglrLlNldFR4SW5kZXhUcmFuc2llbnQoY3R4LCB1aW50NjQodHhDb25maWcuVHhJbmRleCkrMSkKCgl0b3RhbEdhc1VzZWQsIGVyciA6PSBrLkFkZFRyYW5zaWVudEdhc1VzZWQoY3R4LCByZXMuR2FzVXNlZCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycm9yc21vZC5XcmFwKGVyciwgJnF1b3Q7ZmFpbGVkIHRvIGFkZCB0cmFuc2llbnQgZ2FzIHVzZWQmcXVvdDspCgl9CgoJLy8gcmVzZXQgdGhlIGdhcyBtZXRlciBmb3IgY3VycmVudCBjb3Ntb3MgdHJhbnNhY3Rpb24KCWsuUmVzZXRHYXNNZXRlckFuZENvbnN1bWVHYXMoY3R4LCB0b3RhbEdhc1VzZWQpCglyZXR1cm4gcmVzLCBuaWwKfQoKLy8gQXBwbHlNZXNzYWdlIGNhbGxzIEFwcGx5TWVzc2FnZVdpdGhDb25maWcgd2l0aCBhbiBlbXB0eSBUeENvbmZpZy4KZnVuYyAoayAqS2VlcGVyKSBBcHBseU1lc3NhZ2UoY3R4IHNkay5Db250ZXh0LCBtc2cgY29yZS5NZXNzYWdlLCB0cmFjZXIgdm0uRVZNTG9nZ2VyLCBjb21taXQgYm9vbCkgKCp0eXBlcy5Nc2dFdGhlcmV1bVR4UmVzcG9uc2UsIGVycm9yKSB7CgljZmcsIGVyciA6PSBrLkVWTUNvbmZpZyhjdHgsIHNkay5Db25zQWRkcmVzcyhjdHguQmxvY2tIZWFkZXIoKS5Qcm9wb3NlckFkZHJlc3MpLCBrLmVpcDE1NUNoYWluSUQpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnJvcnNtb2QuV3JhcChlcnIsICZxdW90O2ZhaWxlZCB0byBsb2FkIGV2bSBjb25maWcmcXVvdDspCgl9CgoJdHhDb25maWcgOj0gc3RhdGVkYi5OZXdFbXB0eVR4Q29uZmlnKGNvbW1vbi5CeXRlc1RvSGFzaChjdHguSGVhZGVySGFzaCgpKSkKCXJldHVybiBrLkFwcGx5TWVzc2FnZVdpdGhDb25maWcoY3R4LCBtc2csIHRyYWNlciwgY29tbWl0LCBjZmcsIHR4Q29uZmlnKQp9CgovLyBBcHBseU1lc3NhZ2VXaXRoQ29uZmlnIGNvbXB1dGVzIHRoZSBuZXcgc3RhdGUgYnkgYXBwbHlpbmcgdGhlIGdpdmVuIG1lc3NhZ2UgYWdhaW5zdCB0aGUgZXhpc3Rpbmcgc3RhdGUuCi8vIElmIHRoZSBtZXNzYWdlIGZhaWxzLCB0aGUgVk0gZXhlY3V0aW9uIGVycm9yIHdpdGggdGhlIHJlYXNvbiB3aWxsIGJlIHJldHVybmVkIHRvIHRoZSBjbGllbnQKLy8gYW5kIHRoZSB0cmFuc2FjdGlvbiB3b24ndCBiZSBjb21taXR0ZWQgdG8gdGhlIHN0b3JlLgovLwovLyAjIFJldmVydGVkIHN0YXRlCi8vCi8vIFRoZSBzbmFwc2hvdCBhbmQgcm9sbGJhY2sgYXJlIHN1cHBvcnRlZCBieSB0aGUgYHN0YXRlZGIuU3RhdGVEQmAuCi8vCi8vICMgRGlmZmVyZW50IENhbGxlcnMKLy8KLy8gSXQncyBjYWxsZWQgaW4gdGhyZWUgc2NlbmFyaW9zOgovLyAxLiBgQXBwbHlUcmFuc2FjdGlvbmAsIGluIHRoZSB0cmFuc2FjdGlvbiBwcm9jZXNzaW5nIGZsb3cuCi8vIDIuIGBFdGhDYWxsL0V0aEVzdGltYXRlR2FzYCBncnBjIHF1ZXJ5IGhhbmRsZXIuCi8vIDMuIENhbGxlZCBieSBvdGhlciBuYXRpdmUgbW9kdWxlcyBkaXJlY3RseS4KLy8KLy8gIyBQcmVjaGVja3MgYW5kIFByZXByb2Nlc3NpbmcKLy8KLy8gQWxsIHJlbGV2YW50IHN0YXRlIHRyYW5zaXRpb24gcHJlY2hlY2tzIGZvciB0aGUgTXNnRXRoZXJldW1UeCBhcmUgcGVyZm9ybWVkIG9uIHRoZSBBbnRlSGFuZGxlciwKLy8gcHJpb3IgdG8gcnVubmluZyB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCB0aGUgc3RhdGUuIFRoZSBwcmVjaGVja3MgcnVuIGFyZSB0aGUgZm9sbG93aW5nOgovLwovLyAxLiB0aGUgbm9uY2Ugb2YgdGhlIG1lc3NhZ2UgY2FsbGVyIGlzIGNvcnJlY3QKLy8gMi4gY2FsbGVyIGhhcyBlbm91Z2ggYmFsYW5jZSB0byBjb3ZlciB0cmFuc2FjdGlvbiBmZWUoZ2FzbGltaXQgKiBnYXNwcmljZSkKLy8gMy4gdGhlIGFtb3VudCBvZiBnYXMgcmVxdWlyZWQgaXMgYXZhaWxhYmxlIGluIHRoZSBibG9jawovLyA0LiB0aGUgcHVyY2hhc2VkIGdhcyBpcyBlbm91Z2ggdG8gY292ZXIgaW50cmluc2ljIHVzYWdlCi8vIDUuIHRoZXJlIGlzIG5vIG92ZXJmbG93IHdoZW4gY2FsY3VsYXRpbmcgaW50cmluc2ljIGdhcwovLyA2LiBjYWxsZXIgaGFzIGVub3VnaCBiYWxhbmNlIHRvIGNvdmVyIGFzc2V0IHRyYW5zZmVyIGZvciAqKnRvcG1vc3QqKiBjYWxsCi8vCi8vIFRoZSBwcmVwcm9jZXNzaW5nIHN0ZXBzIHBlcmZvcm1lZCBieSB0aGUgQW50ZUhhbmRsZXIgYXJlOgovLwovLyAxLiBzZXQgdXAgdGhlIGluaXRpYWwgYWNjZXNzIGxpc3QgKGlmZiBmb3JrICZndDsgQmVybGluKQovLwovLyAjIFRyYWNlciBwYXJhbWV0ZXIKLy8KLy8gSXQgc2hvdWxkIGJlIGEgYHZtLlRyYWNlcmAgb2JqZWN0IG9yIG5pbCwgaWYgcGFzcyBgbmlsYCwgaXQnbGwgY3JlYXRlIGEgZGVmYXVsdCBvbmUgYmFzZWQgb24ga2VlcGVyIG9wdGlvbnMuCi8vCi8vICMgQ29tbWl0IHBhcmFtZXRlcgovLwovLyBJZiBjb21taXQgaXMgdHJ1ZSwgdGhlIGBTdGF0ZURCYCB3aWxsIGJlIGNvbW1pdHRlZCwgb3RoZXJ3aXNlIGRpc2NhcmRlZC4KZnVuYyAoayAqS2VlcGVyKSBBcHBseU1lc3NhZ2VXaXRoQ29uZmlnKGN0eCBzZGsuQ29udGV4dCwKCW1zZyBjb3JlLk1lc3NhZ2UsCgl0cmFjZXIgdm0uRVZNTG9nZ2VyLAoJY29tbWl0IGJvb2wsCgljZmcgKnN0YXRlZGIuRVZNQ29uZmlnLAoJdHhDb25maWcgc3RhdGVkYi5UeENvbmZpZywKKSAoKnR5cGVzLk1zZ0V0aGVyZXVtVHhSZXNwb25zZSwgZXJyb3IpIHsKCXZhciAoCgkJcmV0ICAgW11ieXRlIC8vIHJldHVybiBieXRlcyBmcm9tIGV2bSBleGVjdXRpb24KCQl2bUVyciBlcnJvciAgLy8gdm0gZXJyb3JzIGRvIG5vdCBlZmZlY3QgY29uc2Vuc3VzIGFuZCBhcmUgdGhlcmVmb3JlIG5vdCBhc3NpZ25lZCB0byBlcnIKCSkKCgkvLyByZXR1cm4gZXJyb3IgaWYgY29udHJhY3QgY3JlYXRpb24gb3IgY2FsbCBhcmUgZGlzYWJsZWQgdGhyb3VnaCBnb3Zlcm5hbmNlCglpZiAhY2ZnLlBhcmFtcy5FbmFibGVDcmVhdGUgJmFtcDsmYW1wOyBtc2cuVG8oKSA9PSBuaWwgewoJCXJldHVybiBuaWwsIGVycm9yc21vZC5XcmFwKHR5cGVzLkVyckNyZWF0ZURpc2FibGVkLCAmcXVvdDtmYWlsZWQgdG8gY3JlYXRlIG5ldyBjb250cmFjdCZxdW90OykKCX0gZWxzZSBpZiAhY2ZnLlBhcmFtcy5FbmFibGVDYWxsICZhbXA7JmFtcDsgbXNnLlRvKCkgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnJvcnNtb2QuV3JhcCh0eXBlcy5FcnJDYWxsRGlzYWJsZWQsICZxdW90O2ZhaWxlZCB0byBjYWxsIGNvbnRyYWN0JnF1b3Q7KQoJfQoKCXN0YXRlREIgOj0gc3RhdGVkYi5OZXcoY3R4LCBrLCB0eENvbmZpZykKCWV2bSA6PSBrLk5ld0VWTShjdHgsIG1zZywgY2ZnLCB0cmFjZXIsIHN0YXRlREIpCgoJbGVmdG92ZXJHYXMgOj0gbXNnLkdhcygpCgoJLy8gQWxsb3cgdGhlIHRyYWNlciBjYXB0dXJlcyB0aGUgdHggbGV2ZWwgZXZlbnRzLCBtYWlubHkgdGhlIGdhcyBjb25zdW1wdGlvbi4KCXZtQ2ZnIDo9IGV2bS5Db25maWcKCWlmIHZtQ2ZnLkRlYnVnIHsKCQl2bUNmZy5UcmFjZXIuQ2FwdHVyZVR4U3RhcnQobGVmdG92ZXJHYXMpCgkJZGVmZXIgZnVuYygpIHsKCQkJdm1DZmcuVHJhY2VyLkNhcHR1cmVUeEVuZChsZWZ0b3ZlckdhcykKCQl9KCkKCX0KCglzZW5kZXIgOj0gdm0uQWNjb3VudFJlZihtc2cuRnJvbSgpKQoJY29udHJhY3RDcmVhdGlvbiA6PSBtc2cuVG8oKSA9PSBuaWwKCWlzTG9uZG9uIDo9IGNmZy5DaGFpbkNvbmZpZy5Jc0xvbmRvbihldm0uQ29udGV4dC5CbG9ja051bWJlcikKCglpbnRyaW5zaWNHYXMsIGVyciA6PSBrLkdldEV0aEludHJpbnNpY0dhcyhjdHgsIG1zZywgY2ZnLkNoYWluQ29uZmlnLCBjb250cmFjdENyZWF0aW9uKQoJaWYgZXJyICE9IG5pbCB7CgkJLy8gc2hvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIGNoZWNrZWQgb24gQW50ZSBIYW5kbGVyCgkJcmV0dXJuIG5pbCwgZXJyb3JzbW9kLldyYXAoZXJyLCAmcXVvdDtpbnRyaW5zaWMgZ2FzIGZhaWxlZCZxdW90OykKCX0KCgkvLyBTaG91bGQgY2hlY2sgYWdhaW4gZXZlbiBpZiBpdCBpcyBjaGVja2VkIG9uIEFudGUgSGFuZGxlciwgYmVjYXVzZSBldGhfY2FsbCBkb24ndCBnbyB0aHJvdWdoIEFudGUgSGFuZGxlci4KCWlmIGxlZnRvdmVyR2FzICZsdDsgaW50cmluc2ljR2FzIHsKCQkvLyBldGhfZXN0aW1hdGVHYXMgd2lsbCBjaGVjayBmb3IgdGhpcyBleGFjdCBlcnJvcgoJCXJldHVybiBuaWwsIGVycm9yc21vZC5XcmFwKGNvcmUuRXJySW50cmluc2ljR2FzLCAmcXVvdDthcHBseSBtZXNzYWdlJnF1b3Q7KQoJfQoJbGVmdG92ZXJHYXMgLT0gaW50cmluc2ljR2FzCgoJLy8gYWNjZXNzIGxpc3QgcHJlcGFyYXRpb24gaXMgbW92ZWQgZnJvbSBhbnRlIGhhbmRsZXIgdG8gaGVyZSwgYmVjYXVzZSBpdCdzIG5lZWRlZCB3aGVuIGBBcHBseU1lc3NhZ2VgIGlzIGNhbGxlZAoJLy8gdW5kZXIgY29udGV4dHMgd2hlcmUgYW50ZSBoYW5kbGVycyBhcmUgbm90IHJ1biwgZm9yIGV4YW1wbGUgYGV0aF9jYWxsYCBhbmQgYGV0aF9lc3RpbWF0ZUdhc2AuCglpZiBydWxlcyA6PSBjZmcuQ2hhaW5Db25maWcuUnVsZXMoYmlnLk5ld0ludChjdHguQmxvY2tIZWlnaHQoKSksIGNmZy5DaGFpbkNvbmZpZy5NZXJnZU5ldHNwbGl0QmxvY2sgIT0gbmlsKTsgcnVsZXMuSXNCZXJsaW4gewoJCXN0YXRlREIuUHJlcGFyZUFjY2Vzc0xpc3QobXNnLkZyb20oKSwgbXNnLlRvKCksIHZtLkFjdGl2ZVByZWNvbXBpbGVzKHJ1bGVzKSwgbXNnLkFjY2Vzc0xpc3QoKSkKCX0KCglpZiBjb250cmFjdENyZWF0aW9uIHsKCQkvLyB0YWtlIG92ZXIgdGhlIG5vbmNlIG1hbmFnZW1lbnQgZnJvbSBldm06CgkJLy8gLSByZXNldCBzZW5kZXIncyBub25jZSB0byBtc2cuTm9uY2UoKSBiZWZvcmUgY2FsbGluZyBldm0uCgkJLy8gLSBpbmNyZWFzZSBzZW5kZXIncyBub25jZSBieSBvbmUgbm8gbWF0dGVyIHRoZSByZXN1bHQuCgkJc3RhdGVEQi5TZXROb25jZShzZW5kZXIuQWRkcmVzcygpLCBtc2cuTm9uY2UoKSkKCQlyZXQsIF8sIGxlZnRvdmVyR2FzLCB2bUVyciA9IGV2bS5DcmVhdGUoc2VuZGVyLCBtc2cuRGF0YSgpLCBsZWZ0b3ZlckdhcywgbXNnLlZhbHVlKCkpCgkJc3RhdGVEQi5TZXROb25jZShzZW5kZXIuQWRkcmVzcygpLCBtc2cuTm9uY2UoKSsxKQoJfSBlbHNlIHsKCQlyZXQsIGxlZnRvdmVyR2FzLCB2bUVyciA9IGV2bS5DYWxsKHNlbmRlciwgKm1zZy5UbygpLCBtc2cuRGF0YSgpLCBsZWZ0b3ZlckdhcywgbXNnLlZhbHVlKCkpCgl9CgoJcmVmdW5kUXVvdGllbnQgOj0gcGFyYW1zLlJlZnVuZFF1b3RpZW50CgoJLy8gQWZ0ZXIgRUlQLTM1Mjk6IHJlZnVuZHMgYXJlIGNhcHBlZCB0byBnYXNVc2VkIC8gNQoJaWYgaXNMb25kb24gewoJCXJlZnVuZFF1b3RpZW50ID0gcGFyYW1zLlJlZnVuZFF1b3RpZW50RUlQMzUyOQoJfQoKCS8vIGNhbGN1bGF0ZSBnYXMgcmVmdW5kCglpZiBtc2cuR2FzKCkgJmx0OyBsZWZ0b3ZlckdhcyB7CgkJcmV0dXJuIG5pbCwgZXJyb3JzbW9kLldyYXAodHlwZXMuRXJyR2FzT3ZlcmZsb3csICZxdW90O2FwcGx5IG1lc3NhZ2UmcXVvdDspCgl9CgkvLyByZWZ1bmQgZ2FzCgl0ZW1wb3JhcnlHYXNVc2VkIDo9IG1zZy5HYXMoKSAtIGxlZnRvdmVyR2FzCglyZWZ1bmQgOj0gR2FzVG9SZWZ1bmQoc3RhdGVEQi5HZXRSZWZ1bmQoKSwgdGVtcG9yYXJ5R2FzVXNlZCwgcmVmdW5kUXVvdGllbnQpCgoJLy8gdXBkYXRlIGxlZnRvdmVyR2FzIGFuZCB0ZW1wb3JhcnlHYXNVc2VkIHdpdGggcmVmdW5kIGFtb3VudAoJbGVmdG92ZXJHYXMgKz0gcmVmdW5kCgl0ZW1wb3JhcnlHYXNVc2VkIC09IHJlZnVuZAoKCS8vIEVWTSBleGVjdXRpb24gZXJyb3IgbmVlZHMgdG8gYmUgYXZhaWxhYmxlIGZvciB0aGUgSlNPTi1SUEMgY2xpZW50Cgl2YXIgdm1FcnJvciBzdHJpbmcKCWlmIHZtRXJyICE9IG5pbCB7CgkJdm1FcnJvciA9IHZtRXJyLkVycm9yKCkKCX0KCgkvLyBUaGUgZGlydHkgc3RhdGVzIGluIGBTdGF0ZURCYCBpcyBlaXRoZXIgY29tbWl0dGVkIG9yIGRpc2NhcmRlZCBhZnRlciByZXR1cm4KCWlmIGNvbW1pdCB7CgkJaWYgZXJyIDo9IHN0YXRlREIuQ29tbWl0KCk7IGVyciAhPSBuaWwgewoJCQlyZXR1cm4gbmlsLCBlcnJvcnNtb2QuV3JhcChlcnIsICZxdW90O2ZhaWxlZCB0byBjb21taXQgc3RhdGVEQiZxdW90OykKCQl9Cgl9CgoJLy8gY2FsY3VsYXRlIGEgbWluaW11bSBhbW91bnQgb2YgZ2FzIHRvIGJlIGNoYXJnZWQgdG8gc2VuZGVyIGlmIEdhc0xpbWl0CgkvLyBpcyBjb25zaWRlcmFibHkgaGlnaGVyIHRoYW4gR2FzVXNlZCB0byBzdGF5IG1vcmUgYWxpZ25lZCB3aXRoIFRlbmRlcm1pbnQgZ2FzIG1lY2hhbmljcwoJLy8gZm9yIG1vcmUgaW5mbyBodHRwczovL2dpdGh1Yi5jb20vZXZtb3MvZXRoZXJtaW50L2lzc3Vlcy8xMDg1CglnYXNMaW1pdCA6PSBzZGsuTmV3RGVjKGludDY0KG1zZy5HYXMoKSkpCgltaW5HYXNNdWx0aXBsaWVyIDo9IGsuR2V0TWluR2FzTXVsdGlwbGllcihjdHgpCgltaW5pbXVtR2FzVXNlZCA6PSBnYXNMaW1pdC5NdWwobWluR2FzTXVsdGlwbGllcikKCglpZiBtc2cuR2FzKCkgJmx0OyBsZWZ0b3ZlckdhcyB7CgkJcmV0dXJuIG5pbCwgZXJyb3JzbW9kLldyYXBmKHR5cGVzLkVyckdhc092ZXJmbG93LCAmcXVvdDttZXNzYWdlIGdhcyBsaW1pdCAmbHQ7IGxlZnRvdmVyIGdhcyAoJWQgJmx0OyAlZCkmcXVvdDssIG1zZy5HYXMoKSwgbGVmdG92ZXJHYXMpCgl9CgoJZ2FzVXNlZCA6PSBzZGsuTWF4RGVjKG1pbmltdW1HYXNVc2VkLCBzZGsuTmV3RGVjKGludDY0KHRlbXBvcmFyeUdhc1VzZWQpKSkuVHJ1bmNhdGVJbnQoKS5VaW50NjQoKQoJLy8gcmVzZXQgbGVmdG92ZXJHYXMsIHRvIGJlIHVzZWQgYnkgdGhlIHRyYWNlcgoJbGVmdG92ZXJHYXMgPSBtc2cuR2FzKCkgLSBnYXNVc2VkCgoJcmV0dXJuICZhbXA7dHlwZXMuTXNnRXRoZXJldW1UeFJlc3BvbnNlewoJCUdhc1VzZWQ6IGdhc1VzZWQsCgkJVm1FcnJvcjogdm1FcnJvciwKCQlSZXQ6ICAgICByZXQsCgkJTG9nczogICAgdHlwZXMuTmV3TG9nc0Zyb21FdGgoc3RhdGVEQi5Mb2dzKCkpLAoJCUhhc2g6ICAgIHR4Q29uZmlnLlR4SGFzaC5IZXgoKSwKCX0sIG5pbAp9Cg=="}})],1),l._v(" "),Z("h3",{attrs:{id:"antehandler"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#antehandler"}},[l._v("#")]),l._v(" "),Z("code",[l._v("AnteHandler")])]),l._v(" "),Z("p",[l._v("The Cosmos SDK "),Z("a",{attrs:{href:"https://docs.cosmos.network/master/basics/gas-fees.html#antehandler",target:"_blank",rel:"noopener noreferrer"}},[Z("code",[l._v("AnteHandler")]),Z("OutboundLink")],1),l._v("\nperforms basic checks prior to transaction execution. These checks are usually signature\nverification, transaction field validation, transaction fees, etc.")]),l._v(" "),Z("p",[l._v("Regarding gas consumption and fees, the "),Z("code",[l._v("AnteHandler")]),l._v(" checks that the user has enough balance to\ncover for the tx cost (amount plus fees) as well as checking that the gas limit defined in the\nmessage is greater or equal than the computed intrinsic gas for the message.")]),l._v(" "),Z("h2",{attrs:{id:"gas-refunds"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#gas-refunds"}},[l._v("#")]),l._v(" Gas Refunds")]),l._v(" "),Z("p",[l._v("In the EVM, gas can be specified prior to execution. The totality of the gas specified is consumed at the beginning of the execution (during the "),Z("code",[l._v("AnteHandler")]),l._v(" step) and the remaining gas is refunded back to\nthe user if any gas is left over after the execution. Additionally the EVM can also define gas to be refunded back to the user but those will be capped to a fraction of the used gas depending on the fork/version being used.")]),l._v(" "),Z("h2",{attrs:{id:"_0-fee-transactions"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#_0-fee-transactions"}},[l._v("#")]),l._v(" 0 Fee Transactions")]),l._v(" "),Z("p",[l._v("In Cosmos, a minimum gas price is not enforced by the "),Z("code",[l._v("AnteHandler")]),l._v(" as the "),Z("code",[l._v("min-gas-prices")]),l._v(" is\nchecked against the local node/validator. In other words, the minimum fees accepted are determined\nby the validators of the network, and each validator can specify a different minimum value for their fees.\nThis potentially allows end users to submit 0 fee transactions if there is at least one single\nvalidator that is willing to include transactions with "),Z("code",[l._v("0")]),l._v(" gas price in their blocks proposed.")]),l._v(" "),Z("p",[l._v("For this same reason, in Haqq it is possible to send transactions with "),Z("code",[l._v("0")]),l._v(" fees for transaction\ntypes other than the ones defined by the "),Z("code",[l._v("evm")]),l._v(" module. EVM module transactions cannot have "),Z("code",[l._v("0")]),l._v(" fees\nas gas is required inherently by the EVM. This check is done by the EVM transactions stateless validation\n(i.e "),Z("code",[l._v("ValidateBasic")]),l._v(") function as well as on the custom "),Z("code",[l._v("AnteHandler")]),l._v(" defined by Haqq.")]),l._v(" "),Z("h2",{attrs:{id:"gas-estimation"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#gas-estimation"}},[l._v("#")]),l._v(" Gas estimation")]),l._v(" "),Z("p",[l._v("Ethereum provides a JSON-RPC endpoint "),Z("code",[l._v("eth_estimateGas")]),l._v(" to help users set up a correct gas limit in their transactions.")]),l._v(" "),Z("p",[l._v("Unfortunately, we cannot make use of the SDK "),Z("code",[l._v("tx simulation")]),l._v(" for gas estimation because the pre-check in the Ante Handlers would require a valid signature, and the sender balance to be enough to pay for the gas. But in Ethereum, this endpoint can be called without specifying any sender address.")]),l._v(" "),Z("p",[l._v("For that reason, a specific query API "),Z("code",[l._v("EstimateGas")]),l._v(" is implemented in Haqq. It will apply the transaction against the current block/state and perform a binary search in order to find the optimal gas value to return to the user (the same transaction will be applied over and over until we find the minimum gas needed before it fails). The reason we need to use a binary search is that the gas required for the\ntransaction might be higher than the value returned by the EVM after applying the transaction, so we need to try until we find the optimal value.")]),l._v(" "),Z("p",[l._v("A cache context will be used during the whole execution to avoid changes be persisted in the state.")]),l._v(" "),Z("p",[Z("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:""}})],1)])}),[],!1,null,null,null);c.default=d.exports}}]);