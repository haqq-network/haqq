// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: haqq/ucdao/v1/tx.proto

package ucdaov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_Fund_FullMethodName                        = "/haqq.ucdao.v1.Msg/Fund"
	Msg_TransferOwnership_FullMethodName           = "/haqq.ucdao.v1.Msg/TransferOwnership"
	Msg_TransferOwnershipWithRatio_FullMethodName  = "/haqq.ucdao.v1.Msg/TransferOwnershipWithRatio"
	Msg_TransferOwnershipWithAmount_FullMethodName = "/haqq.ucdao.v1.Msg/TransferOwnershipWithAmount"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// Fund defines a method to allow an account to directly fund the dao.
	Fund(ctx context.Context, in *MsgFund, opts ...grpc.CallOption) (*MsgFundResponse, error)
	// TransferOwnership defines a method to allow an account to transfer the
	// ownership of shares to another account.
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
	// TransferOwnershipWithRatio defines a method to allow an account to transfer
	// the ownership of shares to another account with ratio.
	TransferOwnershipWithRatio(ctx context.Context, in *MsgTransferOwnershipWithRatio, opts ...grpc.CallOption) (*MsgTransferOwnershipWithRatioResponse, error)
	// TransferOwnershipWithAmount defines a method to allow an account to
	// transfer the ownership of shares to another account with certain amount of
	// coins.
	TransferOwnershipWithAmount(ctx context.Context, in *MsgTransferOwnershipWithAmount, opts ...grpc.CallOption) (*MsgTransferOwnershipWithAmountResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Fund(ctx context.Context, in *MsgFund, opts ...grpc.CallOption) (*MsgFundResponse, error) {
	out := new(MsgFundResponse)
	err := c.cc.Invoke(ctx, Msg_Fund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, Msg_TransferOwnership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnershipWithRatio(ctx context.Context, in *MsgTransferOwnershipWithRatio, opts ...grpc.CallOption) (*MsgTransferOwnershipWithRatioResponse, error) {
	out := new(MsgTransferOwnershipWithRatioResponse)
	err := c.cc.Invoke(ctx, Msg_TransferOwnershipWithRatio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnershipWithAmount(ctx context.Context, in *MsgTransferOwnershipWithAmount, opts ...grpc.CallOption) (*MsgTransferOwnershipWithAmountResponse, error) {
	out := new(MsgTransferOwnershipWithAmountResponse)
	err := c.cc.Invoke(ctx, Msg_TransferOwnershipWithAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// Fund defines a method to allow an account to directly fund the dao.
	Fund(context.Context, *MsgFund) (*MsgFundResponse, error)
	// TransferOwnership defines a method to allow an account to transfer the
	// ownership of shares to another account.
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
	// TransferOwnershipWithRatio defines a method to allow an account to transfer
	// the ownership of shares to another account with ratio.
	TransferOwnershipWithRatio(context.Context, *MsgTransferOwnershipWithRatio) (*MsgTransferOwnershipWithRatioResponse, error)
	// TransferOwnershipWithAmount defines a method to allow an account to
	// transfer the ownership of shares to another account with certain amount of
	// coins.
	TransferOwnershipWithAmount(context.Context, *MsgTransferOwnershipWithAmount) (*MsgTransferOwnershipWithAmountResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) Fund(context.Context, *MsgFund) (*MsgFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fund not implemented")
}
func (UnimplementedMsgServer) TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedMsgServer) TransferOwnershipWithRatio(context.Context, *MsgTransferOwnershipWithRatio) (*MsgTransferOwnershipWithRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnershipWithRatio not implemented")
}
func (UnimplementedMsgServer) TransferOwnershipWithAmount(context.Context, *MsgTransferOwnershipWithAmount) (*MsgTransferOwnershipWithAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnershipWithAmount not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_Fund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Fund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Fund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Fund(ctx, req.(*MsgFund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnershipWithRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnershipWithRatio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnershipWithRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferOwnershipWithRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnershipWithRatio(ctx, req.(*MsgTransferOwnershipWithRatio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnershipWithAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnershipWithAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnershipWithAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferOwnershipWithAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnershipWithAmount(ctx, req.(*MsgTransferOwnershipWithAmount))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "haqq.ucdao.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fund",
			Handler:    _Msg_Fund_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
		{
			MethodName: "TransferOwnershipWithRatio",
			Handler:    _Msg_TransferOwnershipWithRatio_Handler,
		},
		{
			MethodName: "TransferOwnershipWithAmount",
			Handler:    _Msg_TransferOwnershipWithAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "haqq/ucdao/v1/tx.proto",
}
