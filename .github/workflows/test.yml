name: Tests
on:
  pull_request:
  push:
    branches:
      - master
      - release/**

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"

  install-tparse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Display Go Version
        run: go version
      - name: Install tparse
        run: |
          export GO111MODULE="on" && go install github.com/mfridman/tparse@latest
      - uses: actions/cache@v2.1.7
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary

  test-unit:
    runs-on: ubuntu-cpu16-ram64
    steps:
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Generate LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Pull LFS files
        run: git lfs pull
      - uses: technote-space/get-diff-action@v5
        with:
          PATTERNS: |
            **/**.sol
            **/**.go
            go.mod
            go.sum
      - name: Test unit
        run: |
          make test-unit-cover
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  test-nix:
    runs-on: ubuntu-cpu16-ram64
    steps:
      - uses: actions/checkout@v4
      - uses: haqq-network/nix-action@master
        with:
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          cacheKeyPostfix: ${{ hashFiles('**/go.sum') }}
      - name: Run nix package tests
        run: |
          nix build .#haqq-with-tests --print-build-logs
