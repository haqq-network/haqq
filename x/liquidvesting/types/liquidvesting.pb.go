// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: haqq/liquidvesting/v1/liquidvesting.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	github_com_cosmos_cosmos_sdk_x_auth_vesting_types "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	types "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Denom represents liquid token bonded to some specific vesting schedule
type Denom struct {
	LiquidDenom   string `protobuf:"bytes,1,opt,name=liquidDenom,proto3" json:"liquidDenom,omitempty"`
	OriginalDenom string `protobuf:"bytes,2,opt,name=originalDenom,proto3" json:"originalDenom,omitempty"`
	// start date
	StartTime time.Time `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// end_date
	EndTime time.Time `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// lockup periods
	LockupPeriods github_com_cosmos_cosmos_sdk_x_auth_vesting_types.Periods `protobuf:"bytes,5,rep,name=lockup_periods,json=lockupPeriods,proto3,castrepeated=github.com/cosmos/cosmos-sdk/x/auth/vesting/types.Periods" json:"lockup_periods"`
}

func (m *Denom) Reset()         { *m = Denom{} }
func (m *Denom) String() string { return proto.CompactTextString(m) }
func (*Denom) ProtoMessage()    {}
func (*Denom) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2378517a6b5c6c, []int{0}
}
func (m *Denom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Denom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Denom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Denom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Denom.Merge(m, src)
}
func (m *Denom) XXX_Size() int {
	return m.Size()
}
func (m *Denom) XXX_DiscardUnknown() {
	xxx_messageInfo_Denom.DiscardUnknown(m)
}

var xxx_messageInfo_Denom proto.InternalMessageInfo

func (m *Denom) GetLiquidDenom() string {
	if m != nil {
		return m.LiquidDenom
	}
	return ""
}

func (m *Denom) GetOriginalDenom() string {
	if m != nil {
		return m.OriginalDenom
	}
	return ""
}

func (m *Denom) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Denom) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Denom) GetLockupPeriods() github_com_cosmos_cosmos_sdk_x_auth_vesting_types.Periods {
	if m != nil {
		return m.LockupPeriods
	}
	return nil
}

func init() {
	proto.RegisterType((*Denom)(nil), "haqq.liquidvesting.Denom")
}

func init() {
	proto.RegisterFile("haqq/liquidvesting/v1/liquidvesting.proto", fileDescriptor_ce2378517a6b5c6c)
}

var fileDescriptor_ce2378517a6b5c6c = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0x8e, 0xef, 0x38, 0xb8, 0x73, 0x75, 0x48, 0x44, 0x0c, 0x55, 0x06, 0x27, 0x42, 0x37, 0x94,
	0xe1, 0x6c, 0x5d, 0x99, 0x98, 0x10, 0x85, 0x91, 0x01, 0x55, 0x4c, 0x2c, 0x95, 0x93, 0x98, 0xd4,
	0x6a, 0xe2, 0x97, 0xc6, 0x4e, 0x29, 0xff, 0x80, 0xb1, 0xbf, 0x83, 0x5f, 0xd2, 0xb1, 0x23, 0x13,
	0xad, 0xda, 0x3f, 0x82, 0x62, 0xa7, 0xa5, 0x61, 0xbb, 0x25, 0xf1, 0x7b, 0xef, 0xcb, 0xf7, 0x7d,
	0xf9, 0xfc, 0xf0, 0xeb, 0x29, 0x9f, 0xcf, 0x59, 0x2e, 0xe7, 0xb5, 0x4c, 0x17, 0x42, 0x1b, 0xa9,
	0x32, 0xb6, 0x78, 0xe8, 0x36, 0x68, 0x59, 0x81, 0x01, 0xdf, 0x6f, 0xa0, 0xb4, 0x33, 0x09, 0x5e,
	0xf0, 0x42, 0x2a, 0x60, 0xf6, 0xe9, 0x60, 0xc1, 0xcb, 0x0c, 0x32, 0xb0, 0x47, 0xd6, 0x9c, 0xda,
	0xee, 0x5d, 0x02, 0xba, 0x00, 0xcd, 0xfe, 0x69, 0xc4, 0xc2, 0xf0, 0x07, 0xd6, 0x91, 0x08, 0xc2,
	0x0c, 0x20, 0xcb, 0x05, 0xb3, 0x55, 0x5c, 0x7f, 0x63, 0x46, 0x16, 0x42, 0x1b, 0x5e, 0x94, 0x2d,
	0x80, 0xb4, 0x34, 0x31, 0xd7, 0xe2, 0xc4, 0x91, 0x80, 0x54, 0x6e, 0xfe, 0x6a, 0x77, 0x81, 0xaf,
	0x3e, 0x0a, 0x05, 0x85, 0x1f, 0xe1, 0x9e, 0xb3, 0x6a, 0xcb, 0x3e, 0x8a, 0xd0, 0xe0, 0x66, 0x7c,
	0xde, 0xf2, 0xef, 0xf0, 0x2d, 0x54, 0x32, 0x93, 0x8a, 0xe7, 0x0e, 0x73, 0x61, 0x31, 0xdd, 0xa6,
	0xff, 0x01, 0x63, 0x6d, 0x78, 0x65, 0x26, 0x8d, 0x95, 0xfe, 0x65, 0x84, 0x06, 0xbd, 0x61, 0x40,
	0x9d, 0x4f, 0x7a, 0xf4, 0x49, 0xbf, 0x1c, 0x7d, 0x8e, 0xae, 0xd7, 0x7f, 0x42, 0x6f, 0xb5, 0x0d,
	0xd1, 0xf8, 0xc6, 0x7e, 0xd7, 0x4c, 0xfc, 0x77, 0xf8, 0x5a, 0xa8, 0xd4, 0x51, 0x3c, 0x79, 0x04,
	0xc5, 0x33, 0xa1, 0x52, 0x4b, 0xf0, 0x13, 0xe1, 0xe7, 0x39, 0x24, 0xb3, 0xba, 0x9c, 0x94, 0xa2,
	0x92, 0x90, 0xea, 0xfe, 0x55, 0x74, 0x39, 0xe8, 0x0d, 0x09, 0x75, 0x89, 0xd0, 0x63, 0x90, 0x6d,
	0x28, 0xf4, 0xb3, 0x85, 0x8d, 0xde, 0x37, 0x5c, 0xbf, 0xb6, 0xe1, 0xdb, 0x4c, 0x9a, 0x69, 0x1d,
	0xd3, 0x04, 0x0a, 0xd6, 0x66, 0xe8, 0x5e, 0xf7, 0x3a, 0x9d, 0xb1, 0x25, 0xe3, 0xb5, 0x99, 0x9e,
	0x2e, 0xc7, 0xfc, 0x28, 0x85, 0x6e, 0x19, 0xf4, 0xf8, 0xd6, 0x09, 0xb7, 0xe5, 0xe8, 0xd3, 0x7a,
	0x4f, 0xd0, 0x66, 0x4f, 0xd0, 0x6e, 0x4f, 0xd0, 0xea, 0x40, 0xbc, 0xcd, 0x81, 0x78, 0xbf, 0x0f,
	0xc4, 0xfb, 0x3a, 0x3c, 0xd3, 0x68, 0x76, 0xe5, 0x5e, 0x09, 0xf3, 0x1d, 0xaa, 0x99, 0x2d, 0xd8,
	0xf2, 0xbf, 0x2d, 0xb3, 0x22, 0xf1, 0x53, 0xfb, 0xff, 0x6f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x60, 0x86, 0x50, 0xe5, 0x88, 0x02, 0x00, 0x00,
}

func (m *Denom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Denom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Denom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockupPeriods) > 0 {
		for iNdEx := len(m.LockupPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockupPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidvesting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLiquidvesting(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLiquidvesting(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.OriginalDenom) > 0 {
		i -= len(m.OriginalDenom)
		copy(dAtA[i:], m.OriginalDenom)
		i = encodeVarintLiquidvesting(dAtA, i, uint64(len(m.OriginalDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidDenom) > 0 {
		i -= len(m.LiquidDenom)
		copy(dAtA[i:], m.LiquidDenom)
		i = encodeVarintLiquidvesting(dAtA, i, uint64(len(m.LiquidDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidvesting(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidvesting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Denom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiquidDenom)
	if l > 0 {
		n += 1 + l + sovLiquidvesting(uint64(l))
	}
	l = len(m.OriginalDenom)
	if l > 0 {
		n += 1 + l + sovLiquidvesting(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLiquidvesting(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovLiquidvesting(uint64(l))
	if len(m.LockupPeriods) > 0 {
		for _, e := range m.LockupPeriods {
			l = e.Size()
			n += 1 + l + sovLiquidvesting(uint64(l))
		}
	}
	return n
}

func sovLiquidvesting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidvesting(x uint64) (n int) {
	return sovLiquidvesting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Denom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidvesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Denom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Denom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidvesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidvesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidvesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidvesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidvesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockupPeriods = append(m.LockupPeriods, types.Period{})
			if err := m.LockupPeriods[len(m.LockupPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidvesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidvesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidvesting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidvesting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidvesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidvesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidvesting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidvesting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidvesting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidvesting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidvesting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidvesting = fmt.Errorf("proto: unexpected end of group")
)
