// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: haqq/coinomics/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryEraRequest struct {
}

func (m *QueryEraRequest) Reset()         { *m = QueryEraRequest{} }
func (m *QueryEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEraRequest) ProtoMessage()    {}
func (*QueryEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{0}
}
func (m *QueryEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraRequest.Merge(m, src)
}
func (m *QueryEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraRequest proto.InternalMessageInfo

type QueryEraResponse struct {
	Era uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryEraResponse) Reset()         { *m = QueryEraResponse{} }
func (m *QueryEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEraResponse) ProtoMessage()    {}
func (*QueryEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{1}
}
func (m *QueryEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraResponse.Merge(m, src)
}
func (m *QueryEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraResponse proto.InternalMessageInfo

func (m *QueryEraResponse) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryEraClosingSupplyRequest struct {
}

func (m *QueryEraClosingSupplyRequest) Reset()         { *m = QueryEraClosingSupplyRequest{} }
func (m *QueryEraClosingSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEraClosingSupplyRequest) ProtoMessage()    {}
func (*QueryEraClosingSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{2}
}
func (m *QueryEraClosingSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraClosingSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraClosingSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraClosingSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraClosingSupplyRequest.Merge(m, src)
}
func (m *QueryEraClosingSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraClosingSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraClosingSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraClosingSupplyRequest proto.InternalMessageInfo

type QueryEraClosingSupplyResponse struct {
	EraClosingSupply github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=era_closing_supply,json=eraClosingSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"era_closing_supply"`
}

func (m *QueryEraClosingSupplyResponse) Reset()         { *m = QueryEraClosingSupplyResponse{} }
func (m *QueryEraClosingSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEraClosingSupplyResponse) ProtoMessage()    {}
func (*QueryEraClosingSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{3}
}
func (m *QueryEraClosingSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraClosingSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraClosingSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraClosingSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraClosingSupplyResponse.Merge(m, src)
}
func (m *QueryEraClosingSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraClosingSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraClosingSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraClosingSupplyResponse proto.InternalMessageInfo

type QueryMaxSupplyRequest struct {
}

func (m *QueryMaxSupplyRequest) Reset()         { *m = QueryMaxSupplyRequest{} }
func (m *QueryMaxSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMaxSupplyRequest) ProtoMessage()    {}
func (*QueryMaxSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{4}
}
func (m *QueryMaxSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxSupplyRequest.Merge(m, src)
}
func (m *QueryMaxSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxSupplyRequest proto.InternalMessageInfo

type QueryMaxSupplyResponse struct {
	MaxSupply github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=max_supply,json=maxSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"max_supply"`
}

func (m *QueryMaxSupplyResponse) Reset()         { *m = QueryMaxSupplyResponse{} }
func (m *QueryMaxSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMaxSupplyResponse) ProtoMessage()    {}
func (*QueryMaxSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{5}
}
func (m *QueryMaxSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxSupplyResponse.Merge(m, src)
}
func (m *QueryMaxSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxSupplyResponse proto.InternalMessageInfo

type QueryInflationRateRequest struct {
}

func (m *QueryInflationRateRequest) Reset()         { *m = QueryInflationRateRequest{} }
func (m *QueryInflationRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInflationRateRequest) ProtoMessage()    {}
func (*QueryInflationRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{6}
}
func (m *QueryInflationRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInflationRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInflationRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInflationRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInflationRateRequest.Merge(m, src)
}
func (m *QueryInflationRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInflationRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInflationRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInflationRateRequest proto.InternalMessageInfo

type QueryInflationRateResponse struct {
	// rate by which the total supply increases within one era
	InflationRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=inflation_rate,json=inflationRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation_rate"`
}

func (m *QueryInflationRateResponse) Reset()         { *m = QueryInflationRateResponse{} }
func (m *QueryInflationRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInflationRateResponse) ProtoMessage()    {}
func (*QueryInflationRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{7}
}
func (m *QueryInflationRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInflationRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInflationRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInflationRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInflationRateResponse.Merge(m, src)
}
func (m *QueryInflationRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInflationRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInflationRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInflationRateResponse proto.InternalMessageInfo

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{8}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bccdbe1913fce8f0, []int{9}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryEraRequest)(nil), "haqq.coinomics.v1.QueryEraRequest")
	proto.RegisterType((*QueryEraResponse)(nil), "haqq.coinomics.v1.QueryEraResponse")
	proto.RegisterType((*QueryEraClosingSupplyRequest)(nil), "haqq.coinomics.v1.QueryEraClosingSupplyRequest")
	proto.RegisterType((*QueryEraClosingSupplyResponse)(nil), "haqq.coinomics.v1.QueryEraClosingSupplyResponse")
	proto.RegisterType((*QueryMaxSupplyRequest)(nil), "haqq.coinomics.v1.QueryMaxSupplyRequest")
	proto.RegisterType((*QueryMaxSupplyResponse)(nil), "haqq.coinomics.v1.QueryMaxSupplyResponse")
	proto.RegisterType((*QueryInflationRateRequest)(nil), "haqq.coinomics.v1.QueryInflationRateRequest")
	proto.RegisterType((*QueryInflationRateResponse)(nil), "haqq.coinomics.v1.QueryInflationRateResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "haqq.coinomics.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "haqq.coinomics.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("haqq/coinomics/v1/query.proto", fileDescriptor_bccdbe1913fce8f0) }

var fileDescriptor_bccdbe1913fce8f0 = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x63, 0xda, 0x46, 0xca, 0xa1, 0x42, 0x7a, 0x14, 0x4a, 0xdc, 0xd6, 0x69, 0x5d, 0x08,
	0xa9, 0x44, 0xee, 0x48, 0x19, 0xd8, 0x53, 0x2a, 0xc1, 0x00, 0x02, 0x23, 0x16, 0x96, 0xe8, 0xe2,
	0x1e, 0xae, 0xd5, 0xd8, 0xe7, 0xf8, 0x9c, 0x90, 0x30, 0xc2, 0xc2, 0x88, 0xc4, 0x80, 0xf8, 0x00,
	0x7c, 0x10, 0xb6, 0x8e, 0x95, 0x58, 0x10, 0x43, 0x85, 0x12, 0x3e, 0x08, 0xf2, 0xf9, 0x9c, 0xc6,
	0x8e, 0x53, 0xb2, 0x74, 0x8a, 0x75, 0xff, 0xff, 0x7b, 0xef, 0x77, 0xce, 0xff, 0x19, 0x6c, 0x1e,
	0x91, 0x4e, 0x07, 0x9b, 0xcc, 0x76, 0x99, 0x63, 0x9b, 0x1c, 0xf7, 0xea, 0xb8, 0xd3, 0xa5, 0xfe,
	0x00, 0x79, 0x3e, 0x0b, 0x18, 0x5c, 0x09, 0x65, 0x34, 0x96, 0x51, 0xaf, 0xae, 0xae, 0x5a, 0xcc,
	0x62, 0x42, 0xc5, 0xe1, 0x53, 0x64, 0x54, 0x37, 0x2c, 0xc6, 0xac, 0x36, 0xc5, 0xc4, 0xb3, 0x31,
	0x71, 0x5d, 0x16, 0x90, 0xc0, 0x66, 0x2e, 0x97, 0xaa, 0x66, 0x32, 0xee, 0x30, 0x8e, 0x5b, 0x84,
	0x53, 0xdc, 0xab, 0xb7, 0x68, 0x40, 0xea, 0x62, 0xa8, 0xd4, 0xcb, 0xd3, 0x14, 0x16, 0x75, 0x29,
	0xb7, 0x65, 0x03, 0x7d, 0x05, 0x5c, 0x7f, 0x19, 0x62, 0x1d, 0xf8, 0xc4, 0xa0, 0x9d, 0x2e, 0xe5,
	0x81, 0x7e, 0x07, 0x14, 0xcf, 0x8f, 0xb8, 0xc7, 0x5c, 0x4e, 0x61, 0x11, 0x2c, 0x50, 0x9f, 0xdc,
	0x56, 0xb6, 0x94, 0xea, 0xa2, 0x11, 0x3e, 0xea, 0x1a, 0xd8, 0x88, 0x5d, 0xfb, 0x6d, 0xc6, 0x6d,
	0xd7, 0x7a, 0xd5, 0xf5, 0xbc, 0xf6, 0x20, 0xee, 0xf2, 0x4d, 0x01, 0x9b, 0x33, 0x0c, 0xb2, 0x67,
	0x1f, 0x40, 0xea, 0x93, 0xa6, 0x19, 0x89, 0x4d, 0x2e, 0x54, 0x31, 0xe2, 0xea, 0x5e, 0x09, 0x45,
	0x17, 0x43, 0xe1, 0xc5, 0x90, 0xbc, 0x18, 0xda, 0x67, 0xb6, 0xdb, 0xc0, 0x27, 0x67, 0xe5, 0xdc,
	0xef, 0xb3, 0xf2, 0x3d, 0xcb, 0x0e, 0x8e, 0xba, 0x2d, 0x64, 0x32, 0x07, 0xcb, 0xb7, 0x10, 0xfd,
	0xd4, 0xf8, 0xe1, 0x31, 0x0e, 0x06, 0x1e, 0xe5, 0xa2, 0xc0, 0x28, 0xd2, 0x14, 0x81, 0xbe, 0x06,
	0x6e, 0x0a, 0xb4, 0x67, 0xa4, 0x9f, 0x84, 0xfe, 0xa8, 0x80, 0x5b, 0x69, 0x45, 0xd2, 0xda, 0x00,
	0x38, 0xa4, 0x7f, 0x79, 0x94, 0x05, 0x27, 0x1e, 0xa9, 0xaf, 0x83, 0x92, 0x80, 0x78, 0xea, 0xbe,
	0x6d, 0x8b, 0x7f, 0xdb, 0x20, 0x01, 0x8d, 0x11, 0x39, 0x50, 0xb3, 0x44, 0x49, 0xf9, 0x1a, 0x5c,
	0xb3, 0x63, 0xa1, 0xe9, 0x93, 0x80, 0x0a, 0xd2, 0x42, 0x03, 0x49, 0x9c, 0xca, 0x1c, 0x38, 0x8f,
	0xa9, 0x69, 0x2c, 0xdb, 0x93, 0xed, 0xf5, 0x55, 0x00, 0xc5, 0xd0, 0x17, 0xc4, 0x27, 0x0e, 0x8f,
	0x51, 0x9e, 0x83, 0x1b, 0x89, 0x53, 0xc9, 0xf0, 0x08, 0xe4, 0x3d, 0x71, 0x32, 0x7e, 0x4b, 0x53,
	0x59, 0x47, 0x51, 0x49, 0x63, 0x31, 0xc4, 0x32, 0xa4, 0x7d, 0xef, 0xc7, 0x12, 0x58, 0x12, 0x0d,
	0x21, 0x03, 0x0b, 0x07, 0x3e, 0x81, 0x7a, 0x46, 0x65, 0x2a, 0xad, 0xea, 0xce, 0x85, 0x9e, 0x08,
	0x49, 0x2f, 0x7f, 0xf8, 0xf9, 0xf7, 0xcb, 0x95, 0x12, 0x5c, 0xc3, 0xa1, 0xf9, 0x30, 0xb9, 0x10,
	0xd4, 0x27, 0xf0, 0xbb, 0x02, 0x8a, 0xe9, 0xa0, 0x42, 0x7c, 0x41, 0xeb, 0xac, 0xcc, 0xab, 0x0f,
	0xe6, 0x2f, 0x90, 0x60, 0x48, 0x80, 0x55, 0x61, 0x65, 0x06, 0x58, 0x6a, 0x3b, 0xe0, 0x27, 0x05,
	0x14, 0xc6, 0xd9, 0x84, 0xd5, 0x59, 0xf3, 0xd2, 0xc1, 0x56, 0x77, 0xe7, 0x70, 0x4a, 0xa4, 0x8a,
	0x40, 0xda, 0x82, 0x5a, 0x16, 0xd2, 0xf9, 0x0a, 0xc0, 0xaf, 0x0a, 0x58, 0x4e, 0x84, 0x10, 0xde,
	0x9f, 0x35, 0x24, 0x2b, 0xc8, 0x6a, 0x6d, 0x4e, 0xb7, 0xc4, 0xda, 0x15, 0x58, 0x3b, 0x70, 0x1b,
	0x4f, 0x7f, 0xd2, 0x92, 0x91, 0x87, 0xef, 0x41, 0x3e, 0xca, 0x17, 0xbc, 0x3b, 0x6b, 0x46, 0x22,
	0xc8, 0x6a, 0xe5, 0x7f, 0x36, 0xc9, 0xb0, 0x2d, 0x18, 0xd6, 0x61, 0x29, 0x83, 0x21, 0xca, 0x70,
	0xe3, 0xc9, 0xc9, 0x50, 0x53, 0x4e, 0x87, 0x9a, 0xf2, 0x67, 0xa8, 0x29, 0x9f, 0x47, 0x5a, 0xee,
	0x74, 0xa4, 0xe5, 0x7e, 0x8d, 0xb4, 0xdc, 0x1b, 0x34, 0xb1, 0x7a, 0x61, 0x79, 0xcd, 0xa5, 0xc1,
	0x3b, 0xe6, 0x1f, 0x47, 0xbd, 0xfa, 0x13, 0xdd, 0xc4, 0x1a, 0xb6, 0xf2, 0xe2, 0x03, 0xfd, 0xf0,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x00, 0xef, 0x71, 0x49, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Era retrieves current era.
	Era(ctx context.Context, in *QueryEraRequest, opts ...grpc.CallOption) (*QueryEraResponse, error)
	// EraTargetSupply retrieves current era target supply.
	EraClosingSupply(ctx context.Context, in *QueryEraClosingSupplyRequest, opts ...grpc.CallOption) (*QueryEraClosingSupplyResponse, error)
	// MaxSupply retrieves total coins of all eras and when mint ended.
	MaxSupply(ctx context.Context, in *QueryMaxSupplyRequest, opts ...grpc.CallOption) (*QueryMaxSupplyResponse, error)
	// InflationRate retrieves current era inflation rate.
	InflationRate(ctx context.Context, in *QueryInflationRateRequest, opts ...grpc.CallOption) (*QueryInflationRateResponse, error)
	// Params retrieves coinomics moudle params.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Era(ctx context.Context, in *QueryEraRequest, opts ...grpc.CallOption) (*QueryEraResponse, error) {
	out := new(QueryEraResponse)
	err := c.cc.Invoke(ctx, "/haqq.coinomics.v1.Query/Era", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraClosingSupply(ctx context.Context, in *QueryEraClosingSupplyRequest, opts ...grpc.CallOption) (*QueryEraClosingSupplyResponse, error) {
	out := new(QueryEraClosingSupplyResponse)
	err := c.cc.Invoke(ctx, "/haqq.coinomics.v1.Query/EraClosingSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaxSupply(ctx context.Context, in *QueryMaxSupplyRequest, opts ...grpc.CallOption) (*QueryMaxSupplyResponse, error) {
	out := new(QueryMaxSupplyResponse)
	err := c.cc.Invoke(ctx, "/haqq.coinomics.v1.Query/MaxSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InflationRate(ctx context.Context, in *QueryInflationRateRequest, opts ...grpc.CallOption) (*QueryInflationRateResponse, error) {
	out := new(QueryInflationRateResponse)
	err := c.cc.Invoke(ctx, "/haqq.coinomics.v1.Query/InflationRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/haqq.coinomics.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Era retrieves current era.
	Era(context.Context, *QueryEraRequest) (*QueryEraResponse, error)
	// EraTargetSupply retrieves current era target supply.
	EraClosingSupply(context.Context, *QueryEraClosingSupplyRequest) (*QueryEraClosingSupplyResponse, error)
	// MaxSupply retrieves total coins of all eras and when mint ended.
	MaxSupply(context.Context, *QueryMaxSupplyRequest) (*QueryMaxSupplyResponse, error)
	// InflationRate retrieves current era inflation rate.
	InflationRate(context.Context, *QueryInflationRateRequest) (*QueryInflationRateResponse, error)
	// Params retrieves coinomics moudle params.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Era(ctx context.Context, req *QueryEraRequest) (*QueryEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Era not implemented")
}
func (*UnimplementedQueryServer) EraClosingSupply(ctx context.Context, req *QueryEraClosingSupplyRequest) (*QueryEraClosingSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraClosingSupply not implemented")
}
func (*UnimplementedQueryServer) MaxSupply(ctx context.Context, req *QueryMaxSupplyRequest) (*QueryMaxSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxSupply not implemented")
}
func (*UnimplementedQueryServer) InflationRate(ctx context.Context, req *QueryInflationRateRequest) (*QueryInflationRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InflationRate not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Era_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Era(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haqq.coinomics.v1.Query/Era",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Era(ctx, req.(*QueryEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraClosingSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEraClosingSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraClosingSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haqq.coinomics.v1.Query/EraClosingSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraClosingSupply(ctx, req.(*QueryEraClosingSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaxSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMaxSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaxSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haqq.coinomics.v1.Query/MaxSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaxSupply(ctx, req.(*QueryMaxSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InflationRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInflationRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InflationRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haqq.coinomics.v1.Query/InflationRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InflationRate(ctx, req.(*QueryInflationRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haqq.coinomics.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "haqq.coinomics.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Era",
			Handler:    _Query_Era_Handler,
		},
		{
			MethodName: "EraClosingSupply",
			Handler:    _Query_EraClosingSupply_Handler,
		},
		{
			MethodName: "MaxSupply",
			Handler:    _Query_MaxSupply_Handler,
		},
		{
			MethodName: "InflationRate",
			Handler:    _Query_InflationRate_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "haqq/coinomics/v1/query.proto",
}

func (m *QueryEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEraClosingSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraClosingSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraClosingSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEraClosingSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraClosingSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraClosingSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EraClosingSupply.Size()
		i -= size
		if _, err := m.EraClosingSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMaxSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMaxSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxSupply.Size()
		i -= size
		if _, err := m.MaxSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInflationRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInflationRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInflationRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInflationRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInflationRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInflationRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InflationRate.Size()
		i -= size
		if _, err := m.InflationRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryEraClosingSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEraClosingSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraClosingSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMaxSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMaxSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInflationRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInflationRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InflationRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEraClosingSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraClosingSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraClosingSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEraClosingSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraClosingSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraClosingSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraClosingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraClosingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInflationRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInflationRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInflationRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInflationRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInflationRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInflationRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
