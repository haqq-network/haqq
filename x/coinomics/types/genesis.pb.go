// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: haqq/coinomics/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the inflation module's genesis state.
type GenesisState struct {
	// params defines all the paramaters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// current inflation rate
	Inflation github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=inflation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation"`
	// current era number
	Era uint64 `protobuf:"varint,3,opt,name=era,proto3" json:"era,omitempty"`
	// era started block number
	EraStartedAtBlock uint64 `protobuf:"varint,4,opt,name=era_started_at_block,json=eraStartedAtBlock,proto3" json:"era_started_at_block,omitempty"`
	// target mint for current era
	EraTargetMint github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=era_target_mint,json=eraTargetMint,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"era_target_mint" yaml:"era_target_mint"`
	// closing supply for current era
	EraClosingSupply github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=era_closing_supply,json=eraClosingSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"era_closing_supply" yaml:"era_closing_supply"`
	// max supply
	MaxSupply github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=max_supply,json=maxSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"max_supply" yaml:"max_supply"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_228a4e7fa0b804ae, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *GenesisState) GetEraStartedAtBlock() uint64 {
	if m != nil {
		return m.EraStartedAtBlock
	}
	return 0
}

// Params holds parameters for the coinomics module.
type Params struct {
	// type of coin to mint
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	// number of blocks per era
	BlocksPerEra uint64 `protobuf:"varint,2,opt,name=blocks_per_era,json=blocksPerEra,proto3" json:"blocks_per_era,omitempty"`
	// parameter to enable coinmoics
	EnableCoinomics bool `protobuf:"varint,3,opt,name=enable_coinomics,json=enableCoinomics,proto3" json:"enable_coinomics,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_228a4e7fa0b804ae, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Params) GetBlocksPerEra() uint64 {
	if m != nil {
		return m.BlocksPerEra
	}
	return 0
}

func (m *Params) GetEnableCoinomics() bool {
	if m != nil {
		return m.EnableCoinomics
	}
	return false
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "haqq.coinomics.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "haqq.coinomics.v1.Params")
}

func init() { proto.RegisterFile("haqq/coinomics/v1/genesis.proto", fileDescriptor_228a4e7fa0b804ae) }

var fileDescriptor_228a4e7fa0b804ae = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x6d, 0xb6, 0x52, 0xa8, 0x19, 0xac, 0xb5, 0x26, 0x94, 0x4d, 0x22, 0xad, 0x22, 0x04, 0xe5,
	0x30, 0x47, 0x85, 0x03, 0x12, 0x37, 0xda, 0x22, 0x40, 0x1a, 0xd2, 0x94, 0x72, 0xe2, 0x12, 0x39,
	0xe9, 0x47, 0x16, 0x35, 0xb1, 0x33, 0xdb, 0x2b, 0xed, 0x85, 0x5f, 0xc0, 0x81, 0x0b, 0xff, 0x69,
	0xc7, 0x1d, 0x11, 0x87, 0x0a, 0xb5, 0xff, 0x80, 0x3f, 0x00, 0xb2, 0xdd, 0xad, 0x03, 0x0e, 0x63,
	0xa7, 0x38, 0xef, 0x7b, 0xf6, 0x7b, 0xdf, 0xe7, 0x67, 0xd4, 0x3a, 0xa2, 0xc7, 0xc7, 0x41, 0xc2,
	0x33, 0xc6, 0x8b, 0x2c, 0x91, 0xc1, 0xa4, 0x1b, 0xa4, 0xc0, 0x40, 0x66, 0x92, 0x94, 0x82, 0x2b,
	0x8e, 0x9b, 0x9a, 0x40, 0x2e, 0x08, 0x64, 0xd2, 0xdd, 0xdb, 0x49, 0x79, 0xca, 0x4d, 0x35, 0xd0,
	0x2b, 0x4b, 0xdc, 0xf3, 0x12, 0x2e, 0x0b, 0x2e, 0x83, 0x98, 0x4a, 0x08, 0x26, 0xdd, 0x18, 0x14,
	0xed, 0x9a, 0x83, 0x6d, 0xdd, 0xff, 0x55, 0x45, 0x5b, 0xaf, 0xec, 0xd1, 0x43, 0x45, 0x15, 0xe0,
	0x67, 0xa8, 0x56, 0x52, 0x41, 0x0b, 0xe9, 0x3a, 0x6d, 0xa7, 0x73, 0xfb, 0xc9, 0x2e, 0xf9, 0x47,
	0x8a, 0x1c, 0x1a, 0x42, 0xaf, 0x7a, 0x3a, 0x6f, 0x55, 0xc2, 0x15, 0x1d, 0x1f, 0xa0, 0x7a, 0xc6,
	0x3e, 0xe4, 0x54, 0x65, 0x9c, 0xb9, 0x1b, 0x6d, 0xa7, 0x53, 0xef, 0x11, 0x4d, 0xf8, 0x3e, 0x6f,
	0x3d, 0x4c, 0x33, 0x75, 0x74, 0x12, 0x93, 0x84, 0x17, 0xc1, 0xca, 0x8f, 0xfd, 0xec, 0xcb, 0xd1,
	0x38, 0x50, 0xb3, 0x12, 0x24, 0x19, 0x40, 0x12, 0xae, 0x0f, 0xc0, 0x0d, 0xb4, 0x09, 0x82, 0xba,
	0x9b, 0x6d, 0xa7, 0x53, 0x0d, 0xf5, 0x12, 0x07, 0x68, 0x07, 0x04, 0x8d, 0xa4, 0xa2, 0x42, 0xc1,
	0x28, 0xa2, 0x2a, 0x8a, 0x73, 0x9e, 0x8c, 0xdd, 0xaa, 0xa1, 0x34, 0x41, 0xd0, 0xa1, 0x2d, 0xbd,
	0x50, 0x3d, 0x5d, 0xc0, 0x9f, 0x1d, 0xb4, 0xad, 0x77, 0x28, 0x2a, 0x52, 0x50, 0x51, 0x91, 0x31,
	0xe5, 0xde, 0x58, 0xf5, 0x64, 0xe5, 0x89, 0x9e, 0x0a, 0x59, 0x4d, 0x85, 0xf4, 0x79, 0xc6, 0x7a,
	0x6f, 0x56, 0x96, 0x1f, 0xfd, 0x87, 0x65, 0xbd, 0xe1, 0xe7, 0xbc, 0x75, 0x6f, 0x46, 0x8b, 0xfc,
	0xb9, 0xff, 0x97, 0x94, 0x1f, 0xde, 0x01, 0x41, 0xdf, 0x19, 0xe0, 0x6d, 0xc6, 0x14, 0xfe, 0xea,
	0x20, 0xac, 0x39, 0x49, 0xce, 0x65, 0xc6, 0xd2, 0x48, 0x9e, 0x94, 0x65, 0x3e, 0x73, 0x6b, 0x57,
	0x39, 0x3a, 0xb8, 0xbe, 0xa3, 0xdd, 0xb5, 0xa3, 0x3f, 0xd5, 0xfc, 0xb0, 0x01, 0x82, 0xf6, 0x2d,
	0x36, 0x34, 0x10, 0xfe, 0x84, 0x50, 0x41, 0xa7, 0xe7, 0x76, 0x6e, 0x5e, 0x65, 0x67, 0x70, 0x7d,
	0x3b, 0x4d, 0x6b, 0x67, 0xad, 0xe2, 0x87, 0xf5, 0x82, 0x4e, 0xad, 0xbe, 0x3f, 0x45, 0x35, 0x9b,
	0x27, 0x7c, 0x1f, 0x21, 0x3d, 0xb9, 0x68, 0x04, 0x8c, 0x17, 0x26, 0x7e, 0xf5, 0xb0, 0xae, 0x91,
	0x81, 0x06, 0xf0, 0x03, 0x74, 0xd7, 0xdc, 0xb8, 0x8c, 0x4a, 0x10, 0x91, 0x4e, 0xc7, 0x86, 0xb9,
	0xfa, 0x2d, 0x8b, 0x1e, 0x82, 0x78, 0x29, 0x28, 0x7e, 0x8c, 0x1a, 0xc0, 0x68, 0x9c, 0x43, 0x74,
	0x11, 0x59, 0x93, 0xa2, 0x5b, 0xe1, 0xb6, 0xc5, 0xfb, 0xe7, 0x70, 0xef, 0xf5, 0xe9, 0xc2, 0x73,
	0xce, 0x16, 0x9e, 0xf3, 0x63, 0xe1, 0x39, 0x5f, 0x96, 0x5e, 0xe5, 0x6c, 0xe9, 0x55, 0xbe, 0x2d,
	0xbd, 0xca, 0x7b, 0x72, 0xa9, 0x39, 0x1d, 0xff, 0x7d, 0x06, 0xea, 0x23, 0x17, 0x63, 0xf3, 0x13,
	0x4c, 0x2f, 0xbd, 0x4c, 0xd3, 0x68, 0x5c, 0x33, 0x8f, 0xe9, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe0, 0x2f, 0x83, 0x10, 0xb8, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxSupply.Size()
		i -= size
		if _, err := m.MaxSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.EraClosingSupply.Size()
		i -= size
		if _, err := m.EraClosingSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.EraTargetMint.Size()
		i -= size
		if _, err := m.EraTargetMint.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.EraStartedAtBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EraStartedAtBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.Era != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Inflation.Size()
		i -= size
		if _, err := m.Inflation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableCoinomics {
		i--
		if m.EnableCoinomics {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BlocksPerEra != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlocksPerEra))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Inflation.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Era != 0 {
		n += 1 + sovGenesis(uint64(m.Era))
	}
	if m.EraStartedAtBlock != 0 {
		n += 1 + sovGenesis(uint64(m.EraStartedAtBlock))
	}
	l = m.EraTargetMint.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.EraClosingSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.MaxSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.BlocksPerEra != 0 {
		n += 1 + sovGenesis(uint64(m.BlocksPerEra))
	}
	if m.EnableCoinomics {
		n += 2
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inflation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraStartedAtBlock", wireType)
			}
			m.EraStartedAtBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EraStartedAtBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraTargetMint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraTargetMint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraClosingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraClosingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerEra", wireType)
			}
			m.BlocksPerEra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerEra |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCoinomics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCoinomics = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
