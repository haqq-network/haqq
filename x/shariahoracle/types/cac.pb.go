// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: haqq/shariahoracle/v1/cac.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegisterMintCACProposal
type MintCACProposal struct {
	// title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the addresses of cac grantees
	Grantees []string `protobuf:"bytes,3,rep,name=grantees,proto3" json:"grantees,omitempty"`
}

func (m *MintCACProposal) Reset()         { *m = MintCACProposal{} }
func (m *MintCACProposal) String() string { return proto.CompactTextString(m) }
func (*MintCACProposal) ProtoMessage()    {}
func (*MintCACProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d2931d9601696d, []int{0}
}
func (m *MintCACProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintCACProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintCACProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintCACProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintCACProposal.Merge(m, src)
}
func (m *MintCACProposal) XXX_Size() int {
	return m.Size()
}
func (m *MintCACProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MintCACProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MintCACProposal proto.InternalMessageInfo

func (m *MintCACProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MintCACProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MintCACProposal) GetGrantees() []string {
	if m != nil {
		return m.Grantees
	}
	return nil
}

type BurnCACProposal struct {
	// title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the addresses of cac grantees
	Grantees []string `protobuf:"bytes,3,rep,name=grantees,proto3" json:"grantees,omitempty"`
}

func (m *BurnCACProposal) Reset()         { *m = BurnCACProposal{} }
func (m *BurnCACProposal) String() string { return proto.CompactTextString(m) }
func (*BurnCACProposal) ProtoMessage()    {}
func (*BurnCACProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d2931d9601696d, []int{1}
}
func (m *BurnCACProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnCACProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnCACProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnCACProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnCACProposal.Merge(m, src)
}
func (m *BurnCACProposal) XXX_Size() int {
	return m.Size()
}
func (m *BurnCACProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnCACProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BurnCACProposal proto.InternalMessageInfo

func (m *BurnCACProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BurnCACProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BurnCACProposal) GetGrantees() []string {
	if m != nil {
		return m.Grantees
	}
	return nil
}

type UpdateCACContractProposal struct {
	// title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the addresses of cac grantees
	NewImplementationAddress string `protobuf:"bytes,3,opt,name=new_implementation_address,json=newImplementationAddress,proto3" json:"new_implementation_address,omitempty"`
}

func (m *UpdateCACContractProposal) Reset()         { *m = UpdateCACContractProposal{} }
func (m *UpdateCACContractProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateCACContractProposal) ProtoMessage()    {}
func (*UpdateCACContractProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d2931d9601696d, []int{2}
}
func (m *UpdateCACContractProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCACContractProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCACContractProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCACContractProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCACContractProposal.Merge(m, src)
}
func (m *UpdateCACContractProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCACContractProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCACContractProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCACContractProposal proto.InternalMessageInfo

func (m *UpdateCACContractProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateCACContractProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateCACContractProposal) GetNewImplementationAddress() string {
	if m != nil {
		return m.NewImplementationAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*MintCACProposal)(nil), "haqq.shariahoracle.v1.MintCACProposal")
	proto.RegisterType((*BurnCACProposal)(nil), "haqq.shariahoracle.v1.BurnCACProposal")
	proto.RegisterType((*UpdateCACContractProposal)(nil), "haqq.shariahoracle.v1.UpdateCACContractProposal")
}

func init() { proto.RegisterFile("haqq/shariahoracle/v1/cac.proto", fileDescriptor_c8d2931d9601696d) }

var fileDescriptor_c8d2931d9601696d = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x1c, 0xc5, 0x13, 0xab, 0x62, 0xcf, 0x41, 0x08, 0x15, 0x62, 0x87, 0xb4, 0x38, 0x75, 0x31, 0x47,
	0x75, 0x13, 0x97, 0x36, 0x93, 0xa0, 0x20, 0x05, 0x17, 0x97, 0x72, 0xbd, 0xfc, 0x49, 0x8e, 0xa6,
	0x77, 0xd7, 0xbb, 0x7f, 0x5b, 0xfd, 0x16, 0x6e, 0xae, 0x7e, 0x1c, 0xc7, 0x8e, 0x8e, 0xd2, 0x2c,
	0x7e, 0x0c, 0xb9, 0x04, 0xc4, 0xba, 0x0a, 0x6e, 0xf7, 0xfe, 0xef, 0x77, 0xbc, 0x07, 0x8f, 0x74,
	0x72, 0x36, 0x9f, 0x53, 0x9b, 0x33, 0x23, 0x58, 0xae, 0x0c, 0xe3, 0x05, 0xd0, 0x65, 0x9f, 0x72,
	0xc6, 0x63, 0x6d, 0x14, 0xaa, 0xe0, 0xd8, 0x01, 0xf1, 0x16, 0x10, 0x2f, 0xfb, 0xed, 0x56, 0xa6,
	0x32, 0x55, 0x11, 0xd4, 0xbd, 0x6a, 0xf8, 0x74, 0x4a, 0x8e, 0x6e, 0x85, 0xc4, 0x64, 0x90, 0xdc,
	0x19, 0xa5, 0x95, 0x65, 0x45, 0xd0, 0x22, 0x7b, 0x28, 0xb0, 0x80, 0xd0, 0xef, 0xfa, 0xbd, 0xe6,
	0xa8, 0x16, 0x41, 0x97, 0x1c, 0xa6, 0x60, 0xb9, 0x11, 0x1a, 0x85, 0x92, 0xe1, 0x4e, 0xe5, 0xfd,
	0x3c, 0x05, 0x6d, 0x72, 0x90, 0x19, 0x26, 0x11, 0xc0, 0x86, 0x8d, 0x6e, 0xa3, 0xd7, 0x1c, 0x7d,
	0xeb, 0xcb, 0xdd, 0xcf, 0xd7, 0x8e, 0xe7, 0xc2, 0x86, 0x0b, 0x23, 0xff, 0x27, 0xec, 0xc5, 0x27,
	0x27, 0xf7, 0x3a, 0x65, 0x08, 0xc9, 0x20, 0x49, 0x94, 0x44, 0xc3, 0x38, 0xfe, 0x39, 0xf7, 0x8a,
	0xb4, 0x25, 0xac, 0xc6, 0x62, 0xa6, 0x0b, 0x98, 0x81, 0x44, 0xe6, 0xae, 0x63, 0x96, 0xa6, 0x06,
	0xac, 0x6b, 0xe2, 0x3e, 0x84, 0x12, 0x56, 0xd7, 0x5b, 0xc0, 0xa0, 0xf6, 0xeb, 0x66, 0xc3, 0x9b,
	0xb7, 0x4d, 0xe4, 0xaf, 0x37, 0x91, 0xff, 0xb1, 0x89, 0xfc, 0xe7, 0x32, 0xf2, 0xd6, 0x65, 0xe4,
	0xbd, 0x97, 0x91, 0xf7, 0x70, 0x9e, 0x09, 0xcc, 0x17, 0x93, 0x98, 0xab, 0x19, 0x75, 0x2b, 0x9e,
	0x49, 0xc0, 0x95, 0x32, 0xd3, 0x4a, 0xd0, 0xc7, 0x5f, 0xab, 0xe3, 0x93, 0x06, 0x3b, 0xd9, 0xaf,
	0x86, 0xbc, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x97, 0x44, 0x8a, 0xbd, 0x18, 0x02, 0x00, 0x00,
}

func (m *MintCACProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintCACProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintCACProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grantees) > 0 {
		for iNdEx := len(m.Grantees) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Grantees[iNdEx])
			copy(dAtA[i:], m.Grantees[iNdEx])
			i = encodeVarintCac(dAtA, i, uint64(len(m.Grantees[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCac(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCac(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BurnCACProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnCACProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnCACProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grantees) > 0 {
		for iNdEx := len(m.Grantees) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Grantees[iNdEx])
			copy(dAtA[i:], m.Grantees[iNdEx])
			i = encodeVarintCac(dAtA, i, uint64(len(m.Grantees[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCac(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCac(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCACContractProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCACContractProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCACContractProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewImplementationAddress) > 0 {
		i -= len(m.NewImplementationAddress)
		copy(dAtA[i:], m.NewImplementationAddress)
		i = encodeVarintCac(dAtA, i, uint64(len(m.NewImplementationAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCac(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCac(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCac(dAtA []byte, offset int, v uint64) int {
	offset -= sovCac(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MintCACProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCac(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCac(uint64(l))
	}
	if len(m.Grantees) > 0 {
		for _, s := range m.Grantees {
			l = len(s)
			n += 1 + l + sovCac(uint64(l))
		}
	}
	return n
}

func (m *BurnCACProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCac(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCac(uint64(l))
	}
	if len(m.Grantees) > 0 {
		for _, s := range m.Grantees {
			l = len(s)
			n += 1 + l + sovCac(uint64(l))
		}
	}
	return n
}

func (m *UpdateCACContractProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCac(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCac(uint64(l))
	}
	l = len(m.NewImplementationAddress)
	if l > 0 {
		n += 1 + l + sovCac(uint64(l))
	}
	return n
}

func sovCac(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCac(x uint64) (n int) {
	return sovCac(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MintCACProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintCACProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintCACProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantees = append(m.Grantees, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnCACProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnCACProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnCACProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantees = append(m.Grantees, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCACContractProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCACContractProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCACContractProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewImplementationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewImplementationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCac(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCac
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCac
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCac
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCac
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCac        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCac          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCac = fmt.Errorf("proto: unexpected end of group")
)
